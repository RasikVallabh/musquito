{"version":3,"sources":["webpack://$buzz/webpack/universalModuleDefinition","webpack://$buzz/webpack/bootstrap","webpack://$buzz/./src/Utility.js","webpack://$buzz/./src/Engine.js","webpack://$buzz/./src/Loader.js","webpack://$buzz/./src/Emitter.js","webpack://$buzz/./src/Queue.js","webpack://$buzz/./src/Buzz.js","webpack://$buzz/./src/Heap.js","webpack://$buzz/./src/Sound.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Utility","_classCallCheck","this","_navigator","_contextType","_formats","_isAudioEnabled","navigator","AudioContext","webkitAudioContext","audio","Audio","mp3","Boolean","canPlayType","replace","mpeg","opus","ogg","oga","wav","aac","caf","m4a","mp4","weba","webm","dolby","flac","Math","round","Date","now","random","format","formats","_this","find","isFormatSupported","source","ext","isBase64","exec","toLowerCase","sources","_this2","isSourceSupported","str","test","context","_isMobile","_isTouch","document","addEventListener","unlock","bufferSource","createBufferSource","buffer","createBuffer","connect","destination","cleanUp","removeEventListener","disconnect","start","noteOn","userAgent","maxTouchPoints","msMaxTouchPoints","ErrorType","NoAudio","LoadError","PlayError","EngineError","EngineState","NotReady","Ready","Suspending","Suspended","Resuming","Destroying","Done","EngineEvents","Add","Remove","Volume","Mute","Pause","Stop","Suspend","Resume","Error","engine","Engine","_id","utility","id","_muted","_volume","_cleanUpInterval","_intervalId","_isAudioAvailable","_state","_context","_gainNode","_queue","_heap","_loader","Heap","Queue","args","getContext","_fire","type","error","_ref","volume","muted","cleanUpInterval","onadd","onremove","onstop","onpause","onmute","onvolume","onsuspend","onresume","onerror","ondone","on","Loader","enableAudio","createGain","gain","setValueAtTime","currentTime","setInterval","free","urls","load","unload","vol","undefined","sounds","forEach","sound","stop","add","suspend","then","run","resume","_this3","clearInterval","destroy","dispose","clear","emitter","remove","terminate","close","eventName","handler","once","arguments","length","off","idOrUrl","groupId","Sound","_gain","idle","_len","Array","_key","fire","apply","_Emitter2","default","concat","_Utility","DownloadStatus","Success","Failure","DownloadResult","url","status","_bufferCache","_progressCallsAndCallbacks","_disposed","_load","Promise","all","map","isArray","_unload","resolve","push","reject","err","decodeAudioData","arrayBuffer","data","atob","split","dataView","Uint8Array","charCodeAt","req","XMLHttpRequest","open","responseType","response","send","Emitter","_objectsEventsHandlersMap","_hasObject","objEvents","_hasEvent","filter","eventSubscriber","eventSubscribers","setTimeout","subscriber","_eventActions","actionIdentifier","action","removeAfterRun","hasEvent","fn","keys","_run","hasAction","queued","_Engine","_Loader","BuzzState","Destroyed","BuzzEvents","Load","UnLoad","PlayStart","PlayEnd","Seek","Rate","FadeStart","FadeEnd","FadeStop","Destroy","LoadState","NotLoaded","Loading","Loaded","Buzz","_src","_format","_sprite","_rate","_loop","_preload","_autoplay","_buffer","_duration","_compatibleSrc","_loadState","_engine","_fading","_fadeTimer","setup","isAudioAvailable","_typeof","src","sprite","rate","loop","autoplay","preload","onload","onunload","onplaystart","onplayend","onrate","onseek","ondestroy","play","isLoaded","getCompatibleSource","downloadResult","duration","_onLoadFailure","indexOf","getSupportedFormat","getSupportedSource","soundOrId","newSoundId","playSound","soundArgs","playEndCallback","destroyCallback","fadeEndCallback","positions","startPos","endPos","newSound","fadeStop","_sounds","pause","isGroup","mute","unmute","to","fade","clearTimeout","seek","_this4","isPlaying","state","$buzz","method","result","_Engine2","HeapItem","HeapItemCollection","items","soundId","toString","values","item","soundGroupId","isPaused","itemsArray","_collections","col","_toConsumableArray","SoundState","Playing","Paused","_bufferSourceNode","_startPos","_endPos","_currentPos","_rateSeek","_startTime","_playEndCallback","_destroyCallback","_fadeEndCallback","max","playbackRate","_setLoop","_destroyBufferNode","startTime","noteGrainOn","linearRampToValueAtTime","exponentialRampToValueAtTime","cancelScheduledValues","realTime","rateElapsed","noteGrainOff","_onEnded","loopStart","loopEnd"],"mappings":"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","file":"musquito-1.1.1.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"$buzz\"] = factory();\n\telse\n\t\troot[\"$buzz\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","/**\n * Contains helper methods.\n */\nclass Utility {\n\n  /**\n   * The navigator object.\n   * @type {Navigator}\n   * @private\n   */\n  _navigator = null;\n\n  /**\n   * The AudioContext type.\n   * @type {Function}\n   * @private\n   */\n  _contextType = null;\n\n  /**\n   * Dictionary of audio formats and their support status.\n   * @type {object}\n   * @private\n   */\n  _formats = {};\n\n  /**\n   * Is audio already enabled or not.\n   * @type {boolean}\n   * @private\n   */\n  _isAudioEnabled = false;\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    if (typeof navigator !== 'undefined') {\n      this._navigator = navigator;\n    }\n\n    // Set the available Web Audio Context type available in browser.\n    if (typeof AudioContext !== 'undefined') {\n      this._contextType = AudioContext;\n    } else if (typeof webkitAudioContext !== 'undefined') {\n      this._contextType = webkitAudioContext;\n    }\n\n    // Determine the supported audio formats.\n    let audio = new Audio();\n\n    this._formats = {\n      mp3: Boolean(audio.canPlayType('audio/mp3;').replace(/^no$/, '')),\n      mpeg: Boolean(audio.canPlayType('audio/mpeg;').replace(/^no$/, '')),\n      opus: Boolean(audio.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, '')),\n      ogg: Boolean(audio.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, '')),\n      oga: Boolean(audio.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, '')),\n      wav: Boolean(audio.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, '')),\n      aac: Boolean(audio.canPlayType('audio/aac;').replace(/^no$/, '')),\n      caf: Boolean(audio.canPlayType('audio/x-caf;').replace(/^no$/, '')),\n      m4a: Boolean((audio.canPlayType('audio/x-m4a;') ||\n      audio.canPlayType('audio/m4a;') ||\n      audio.canPlayType('audio/aac;')).replace(/^no$/, '')),\n      mp4: Boolean((audio.canPlayType('audio/x-mp4;') ||\n      audio.canPlayType('audio/mp4;') ||\n      audio.canPlayType('audio/aac;')).replace(/^no$/, '')),\n      weba: Boolean(audio.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n      webm: Boolean(audio.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n      dolby: Boolean(audio.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, '')),\n      flac: Boolean((audio.canPlayType('audio/x-flac;') || audio.canPlayType('audio/flac;')).replace(/^no$/, ''))\n    };\n\n    audio = null;\n  }\n\n  /**\n   * Returns an unique id (credit: https://howlerjs.com).\n   * @return {number}\n   */\n  id() {\n    return Math.round(Date.now() * Math.random());\n  }\n\n  /**\n   * Returns the available context type.\n   * @return {Function}\n   */\n  getContextType() {\n    return this._contextType;\n  }\n\n  /**\n   * Instantiates and returns the audio context.\n   * @return {AudioContext|webkitAudioContext}\n   */\n  getContext() {\n    return new this._contextType();\n  }\n\n  /**\n   * Returns the supported audio formats.\n   * @return {Object}\n   */\n  supportedFormats() {\n    return this._formats;\n  }\n\n  /**\n   * Returns true if the passed format is supported.\n   * @param {string} format The audio format ex. \"mp3\"\n   * @return {boolean}\n   */\n  isFormatSupported(format) {\n    return Boolean(this._formats[format]);\n  }\n\n  /**\n   * Returns the first supported format from the passed array.\n   * @param {string[]} formats Array of audio formats\n   * @return {string}\n   */\n  getSupportedFormat(formats) {\n    return formats.find(format => this.isFormatSupported(format));\n  }\n\n  /**\n   * Returns true if the audio source is supported.\n   * @param {string} source The audio source url or base64 string\n   * @return {boolean}\n   */\n  isSourceSupported(source) {\n    let ext = this.isBase64(source) ?\n      (/^data:audio\\/([^;,]+);/i).exec(source) :\n      (/^.+\\.([^.]+)$/).exec(source);\n\n    ext = (/^.+\\.([^.]+)$/).exec(source);\n    return ext ? this.isFormatSupported(ext[1].toLowerCase()) : false;\n  }\n\n  /**\n   * Returns the first supported audio source from the passed array.\n   * @param {string[]} sources Array of audio sources. The audio source could be either url or base64 string.\n   * @return {string}\n   */\n  getSupportedSource(sources) {\n    return sources.find(source => this.isSourceSupported(source));\n  }\n\n  /**\n   * Returns whether the passed string is a base64 string or not.\n   * @param {string} str Base64 audio string\n   * @return {boolean}\n   */\n  isBase64(str) {\n    return (/^data:[^;]+;base64,/).test(str);\n  }\n\n  /**\n   * Enables playing audio on first touch.\n   * @param {AudioContext} context Web API audio context.\n   */\n  enableAudio(context) {\n    if (!this._isMobile() && !this._isTouch() || this._isAudioEnabled) {\n      return;\n    }\n\n    const unlock = () => {\n      let bufferSource = context.createBufferSource();\n      bufferSource.buffer = context.createBuffer(1, 1, 22050);\n      bufferSource.connect(context.destination);\n\n      const cleanUp = () => {\n        document.removeEventListener('touchend', unlock);\n        bufferSource.disconnect();\n        bufferSource.removeEventListener('ended', cleanUp);\n        bufferSource = null;\n      };\n\n      bufferSource.addEventListener('ended', cleanUp);\n\n      if (typeof bufferSource.start === 'undefined') {\n        bufferSource.noteOn(0);\n      } else {\n        bufferSource.start(0);\n      }\n    };\n\n    document.addEventListener('touchend', unlock);\n  }\n\n  /**\n   * Returns true if the platform is mobile.\n   * @return {boolean}\n   * @private\n   */\n  _isMobile() {\n    if (!this._navigator) {\n      return false;\n    }\n\n    return (/iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i).test(this._navigator.userAgent);\n  }\n\n  /**\n   * Returns true if the platform is touch supported.\n   * @return {boolean}\n   * @private\n   */\n  _isTouch() {\n    return typeof window !== 'undefined' && (Boolean(('ontouchend' in window) ||\n        (this._navigator && this._navigator.maxTouchPoints > 0) ||\n        (this._navigator && this._navigator.msMaxTouchPoints > 0)));\n  }\n}\n\nexport default new Utility();\n\n","import Loader from './Loader';\nimport emitter from './Emitter';\nimport Heap from './Heap';\nimport Queue from './Queue';\nimport utility from './Utility';\nimport Sound from './Sound';\n\n/**\n * Enum that represents the different type of errors thrown by Engine and Buzzes.\n * @enum {string}\n */\nconst ErrorType = {\n  NoAudio: 'no-audio',\n  LoadError: 'load',\n  PlayError: 'play',\n  EngineError: 'engine'\n};\n\n/**\n * Represents the different states of the audio engine.\n * @enum {string}\n */\nconst EngineState = {\n  NotReady: 'notready',\n  Ready: 'ready',\n  Suspending: 'suspending',\n  Suspended: 'suspended',\n  Resuming: 'resuming',\n  Destroying: 'destroying',\n  Done: 'done',\n  NoAudio: 'no-audio'\n};\n\n/**\n * Enum that represents the different events by engine.\n * @enum {string}\n */\nconst EngineEvents = {\n  Add: 'add',\n  Remove: 'remove',\n  Volume: 'volume',\n  Mute: 'mute',\n  Pause: 'pause',\n  Stop: 'stop',\n  Suspend: 'suspend',\n  Resume: 'resume',\n  Error: 'error',\n  Done: 'done'\n};\n\n/**\n * The audio engine that orchestrates all the sounds.\n * @class\n */\nclass Engine {\n\n  /**\n   * Unique id of the engine.\n   * @type {number}\n   * @private\n   */\n  _id = utility.id();\n\n  /**\n   * Represents whether the audio engine is currently muted or not.\n   * @type {boolean}\n   * @private\n   */\n  _muted = false;\n\n  /**\n   * Represents the global volume.\n   * @type {number}\n   * @private\n   */\n  _volume = 1.0;\n\n  /**\n   * The heap clean-up period.\n   * @type {number}\n   * @private\n   */\n  _cleanUpInterval = 5;\n\n  /**\n   * The clean-up interval id.\n   * @type {number|null}\n   * @private\n   */\n  _intervalId = null;\n\n  /**\n   * True if Web Audio API is available.\n   * @type {boolean}\n   * @private\n   */\n  _isAudioAvailable = false;\n\n  /**\n   * Represents the current state of the engine.\n   * @type {EngineState}\n   * @private\n   */\n  _state = EngineState.NotReady;\n\n  /**\n   * The Web Audio API's audio context.\n   * @type {AudioContext}\n   * @private\n   */\n  _context = null;\n\n  /**\n   * The master gain node.\n   * @type {GainNode}\n   * @private\n   */\n  _gainNode = null;\n\n  /**\n   * The action queue.\n   * @type {Queue}\n   * @private\n   */\n  _queue = null;\n\n  /**\n   * The sound heap.\n   * @type {Heap}\n   * @private\n   */\n  _heap = null;\n\n  /**\n   * Loader - the component that loads audio buffers with audio data.\n   * @type {Loader}\n   * @private\n   */\n  _loader = null;\n\n  /**\n   * Instantiates the heap and action queue.\n   * @constructor\n   */\n  constructor() {\n    this._heap = new Heap();\n    this._queue = new Queue();\n  }\n\n  /**\n   * Instantiate the audio context and other dependencies.\n   * @param {object} [args] Input parameters object.\n   * @param {number} [args.volume = 1.0] The global volume of the sound engine.\n   * @param {boolean} [args.muted = false] Stay muted initially or not.\n   * @param {number} [args.cleanUpInterval = 5] The heap clean-up interval period in minutes.\n   * @param {function} [args.onadd] Event-handler for the \"add\" event.\n   * @param {function} [args.onremove] Event-handler for the \"remove\" event.\n   * @param {function} [args.onstop] Event-handler for the \"stop\" event.\n   * @param {function} [args.onpause] Event-handler for the \"pause\" event.\n   * @param {function} [args.onmute] Event-handler for the \"mute\" event.\n   * @param {function} [args.onvolume] Event-handler for the \"volume\" event.\n   * @param {function} [args.onsuspend] Event-handler for the \"suspend\" event.\n   * @param {function} [args.onresume] Event-handler for the \"resume\" event.\n   * @param {function} [args.onerror] Event-handler for the \"error\" event.\n   * @param {function} [args.ondone] Event-handler for the \"done\" event.\n   * @return {Engine}\n   */\n  setup(args) {\n    // If the setup is already done return.\n    if (this._state !== EngineState.NotReady) {\n      return this;\n    }\n\n    this._context = utility.getContext();\n\n    // Determine the audio stuff available in the current platform and set the flags accordingly.\n    this._isAudioAvailable = Boolean(this._context);\n\n    // If no Web Audio and HTML5 audio is available fire an error event.\n    if (!this._isAudioAvailable) {\n      this._state = EngineState.NoAudio;\n      this._fire(EngineEvents.Error, { type: ErrorType.NoAudio, error: 'Web Audio API is not available' });\n      return this;\n    }\n\n    // Read the input parameters from the options.\n    const {\n      volume,\n      muted,\n      cleanUpInterval,\n      onadd,\n      onremove,\n      onstop,\n      onpause,\n      onmute,\n      onvolume,\n      onsuspend,\n      onresume,\n      onerror,\n      ondone\n    } = args || {};\n\n    // Set the properties from the read parameters.\n    typeof volume === 'number' && volume >= 0 && volume <= 1.0 && (this._volume = volume);\n    typeof muted === 'boolean' && (this._muted = muted);\n    typeof cleanUpInterval === 'number' && (this._cleanUpInterval = cleanUpInterval);\n    typeof onadd === 'function' && this.on(EngineEvents.Add, onadd);\n    typeof onremove === 'function' && this.on(EngineEvents.Remove, onremove);\n    typeof onstop === 'function' && this.on(EngineEvents.Stop, onstop);\n    typeof onpause === 'function' && this.on(EngineEvents.Pause, onpause);\n    typeof onmute === 'function' && this.on(EngineEvents.Mute, onmute);\n    typeof onvolume === 'function' && this.on(EngineEvents.Volume, onvolume);\n    typeof onsuspend === 'function' && this.on(EngineEvents.Suspend, onsuspend);\n    typeof onresume === 'function' && this.on(EngineEvents.Resume, onresume);\n    typeof onerror === 'function' && this.on(EngineEvents.Error, onerror);\n    typeof ondone === 'function' && this.on(EngineEvents.Done, ondone);\n\n    // Create the buffer loader.\n    this._loader = new Loader(this._context);\n\n    // Auto-enable audio for the mobile devices in the first touch.\n    utility.enableAudio(this._context);\n\n    // Create the audio graph.\n    this._gainNode = this._context.createGain();\n    this._gainNode.gain.setValueAtTime(this._muted ? 0 : this._volume, this._context.currentTime);\n    this._gainNode.connect(this._context.destination);\n\n    this._intervalId = window.setInterval(this._heap.free, this._cleanUpInterval * 60 * 1000);\n\n    this._state = EngineState.Ready;\n\n    return this;\n  }\n\n  /**\n   * Loads single or multiple audio resources into audio buffers and returns them.\n   * @param {string|string[]} urls Single or array of audio urls.\n   * @return {Promise}\n   */\n  load(urls) {\n    return this._loader.load(urls);\n  }\n\n  /**\n   * Unloads single or multiple loaded audio buffers from cache.\n   * @param {string|string[]} [urls] Single or array of audio urls.\n   * @return {Engine}\n   */\n  unload(urls) {\n    this._loader.unload(urls);\n    return this;\n  }\n\n  /**\n   * Mutes the engine.\n   * @return {Engine}\n   */\n  mute() {\n    // If the engine is already muted return.\n    if (this._muted) {\n      return this;\n    }\n\n    // Set the value of gain node to 0.\n    this._gainNode.gain.setValueAtTime(0, this._context.currentTime);\n\n    // Set the muted property true.\n    this._muted = true;\n\n    // Fire the \"mute\" event.\n    this._fire(EngineEvents.Mute, this._muted);\n\n    return this;\n  }\n\n  /**\n   * Un-mutes the engine.\n   * @return {Engine}\n   */\n  unmute() {\n    // If the engine is not muted return.\n    if (!this._muted) {\n      return this;\n    }\n\n    // Reset the gain node's value back to volume.\n    this._gainNode.gain.setValueAtTime(this._volume, this._context.currentTime);\n\n    // Set the muted property to false.\n    this._muted = false;\n\n    // Fire the \"mute\" event.\n    this._fire(EngineEvents.Mute, this._muted);\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the volume for the audio engine that controls global volume for all sounds.\n   * @param {number} [vol] Should be within 0.0 to 1.0.\n   * @return {Engine|number}\n   */\n  volume(vol) {\n    // If no parameter is passed then return the current volume.\n    if (vol === undefined) {\n      return this._volume;\n    }\n\n    // If passed volume is not an acceptable value return.\n    if (typeof vol !== 'number' || vol < 0 || vol > 1.0) {\n      return this;\n    }\n\n    // Set the gain's value to the passed volume.\n    this._gainNode.gain.setValueAtTime(this._muted ? 0 : vol, this._context.currentTime);\n\n    // Set the volume to the property.\n    this._volume = vol;\n\n    // Fire the \"volume\" event.\n    this._fire(EngineEvents.Volume, this._volume);\n\n    return this;\n  }\n\n  /**\n   * Stops all the currently playing sounds.\n   * @return {Engine}\n   */\n  stop() {\n    // Stop all the sounds.\n    this._heap.sounds().forEach(sound => sound.stop());\n\n    // Fire the \"stop\" event.\n    this._fire(EngineEvents.Stop);\n\n    return this;\n  }\n\n  /**\n   * Stops all the playing sounds and suspends the audio context immediately.\n   * @return {Engine}\n   */\n  suspend() {\n    // If the context is resuming then suspend after resumed.\n    if (this._state === EngineState.Resuming) {\n      this._queue.add('after-resume', 'suspend', () => this.suspend());\n      return this;\n    }\n\n    // If the state is not ready return.\n    if (this._state !== EngineState.Ready) {\n      return this;\n    }\n\n    // Stop all the playing sounds.\n    this.stop();\n\n    // Set the state to suspending.\n    this._state = EngineState.Suspending;\n\n    // Suspend the Audio Context.\n    this._context.suspend().then(() => {\n      this._state = EngineState.Suspended;\n      this._queue.run('after-suspend');\n      this._fire(EngineEvents.Suspend);\n    });\n\n    return this;\n  }\n\n  /**\n   * Resumes the audio context from the suspended mode.\n   * @return {Engine}\n   */\n  resume() {\n    // If the context is suspending then resume after suspended.\n    if (this._state === EngineState.Suspending) {\n      this._queue.add('after-suspend', 'resume', () => this.resume());\n      return this;\n    }\n\n    if (!this._state !== EngineState.Suspended) {\n      return this;\n    }\n\n    this._state = EngineState.Resuming;\n\n    this._context.resume().then(() => {\n      this._state = EngineState.Ready;\n      this._queue.run('after-resume');\n      this._fire(EngineEvents.Resume);\n    });\n\n    return this;\n  }\n\n  /**\n   * Shuts down the engine.\n   * @return {Engine}\n   */\n  terminate() {\n    if (this._state === EngineState.Done || this._state === EngineState.Destroying) {\n      return this;\n    }\n\n    const cleanUp = () => {\n      // Stop the timer.\n      this._intervalId && window.clearInterval(this._intervalId);\n      this._intervalId = null;\n\n      // Destroy the heap.\n      this._heap.destroy();\n      this._heap = null;\n\n      // Clear the cache and remove the loader.\n      if (this._loader) {\n        this._loader.dispose();\n        this._loader = null;\n      }\n\n      this._context = null;\n      this._queue.clear();\n      this._queue = null;\n      this._state = EngineState.Done;\n\n      // Fire the \"done\" event.\n      this._fire(EngineEvents.Done);\n\n      emitter.clear(this._id);\n    };\n\n    // Close the context.\n    if (this._context) {\n      if (this._state === EngineState.Suspending) {\n        this._queue.remove('after-suspend');\n        this._queue.add('after-suspend', 'destroy', () => this.terminate());\n        return this;\n      } else if (this._state === EngineState.Resuming) {\n        this._queue.remove('after-resume');\n        this._queue.add('after-resume', 'destroy', () => this.terminate());\n        return this;\n      }\n\n      this._state = EngineState.Destroying;\n      this._context && this._context.close().then(() => cleanUp());\n    } else {\n      this._state = EngineState.Destroying;\n      cleanUp();\n    }\n\n    return this;\n  }\n\n  /**\n   * Subscribes to an event.\n   * @param {string} eventName Name of the event.\n   * @param {function} handler The event-handler function.\n   * @param {boolean} [once = false] Is it one-time subscription or not.\n   * @return {Engine}\n   */\n  on(eventName, handler, once = false) {\n    emitter.on(this._id, eventName, handler, once);\n    return this;\n  }\n\n  /**\n   * Un-subscribes from an event.\n   * @param {string} eventName The event name.\n   * @param {function} [handler] The handler function.\n   * @return {Engine}\n   */\n  off(eventName, handler) {\n    emitter.off(this._id, eventName, handler);\n    return this;\n  }\n\n  /**\n   * Returns the existing sound in heap or create a new one and return.\n   * @param {number|string} idOrUrl The sound id or audio url/base64 string.\n   * @param {number} [groupId] The group id.\n   * @param {object} [args] The sound creation arguments.\n   * @return {Sound}\n   */\n  sound(idOrUrl, groupId, args) {\n    if (typeof idOrUrl === 'number') {\n      return this._heap.sound(idOrUrl);\n    }\n\n    const sound = new Sound(args);\n    this._heap.add(idOrUrl, groupId, sound);\n    sound._gain().connect(this._gainNode);\n\n    return sound;\n  }\n\n  /**\n   * Returns the sounds belongs to a group or all the sounds from the heap.\n   * @param {number} [groupId] The group id.\n   * @return {Array<Sound>}\n   */\n  sounds(groupId) {\n    return this._heap.sounds(groupId);\n  }\n\n  /**\n   * Destroys the sounds belong to the passed group.\n   * @param {boolean} idle True to destroy only the idle sounds.\n   * @param {number} groupId The group id.\n   * @return {Engine}\n   */\n  free(idle, groupId) {\n    this._heap.free(idle, groupId);\n    return this;\n  }\n\n  /**\n   * Returns whether the engine is currently muted or not.\n   * @return {boolean}\n   */\n  muted() {\n    return this._muted;\n  }\n\n  /**\n   * Returns the state of the engine.\n   * @return {EngineState}\n   */\n  state() {\n    return this._state;\n  }\n\n  /**\n   * Returns the created audio context.\n   * @return {AudioContext}\n   */\n  context() {\n    return this._context;\n  }\n\n  /**\n   * Returns true if Web Audio API is available.\n   * @return {boolean}\n   */\n  isAudioAvailable() {\n    return this._isAudioAvailable;\n  }\n\n  /**\n   * Fires an event of engine.\n   * @param {string} eventName The event name.\n   * @param {...*} args The arguments that to be passed to handler.\n   * @return {Engine}\n   * @private\n   */\n  _fire(eventName, ...args) {\n    emitter.fire(this._id, eventName, ...args, this);\n    return this;\n  }\n}\n\nconst engine = new Engine();\nexport { engine as default, EngineState, EngineEvents, ErrorType };\n","import utility from './Utility';\n\n/**\n * Enum to represent the download status of audio resource.\n * @enum {string}\n */\nconst DownloadStatus = {\n  Success: 'success',\n  Failure: 'error'\n};\n\n/**\n * Represents the download result of an audio.\n * @class\n */\nclass DownloadResult {\n\n  /**\n   * The url of the audio resource\n   * @type {string|null}\n   */\n  url = null;\n\n  /**\n   * AudioBuffer or Html5Audio element\n   * @type {AudioBuffer|Audio}\n   */\n  value = null;\n\n  /**\n   * Download error\n   * @type {any}\n   */\n  error = null;\n\n  /**\n   * Success or failure status of download.\n   * @type {DownloadStatus}\n   */\n  status = null;\n\n  /**\n   * @param {string|null} url The url of the audio resource\n   * @param {AudioBuffer|Audio} [value] AudioBuffer or Html5Audio element\n   * @param {*} [error] Download error\n   */\n  constructor(url, value, error) {\n    this.url = url;\n    this.value = value;\n    this.error = error || null;\n    this.status = error ? DownloadStatus.Failure : DownloadStatus.Success;\n  }\n}\n\n/**\n * Loads the audio sources into audio buffers and returns them.\n * The loaded buffers are cached.\n * @class\n */\nclass Loader {\n\n  /**\n   * AudioContext.\n   * @type {AudioContext}\n   * @private\n   */\n  _context = null;\n\n  /**\n   * In-memory audio buffer cache store.\n   * @type {object}\n   * @private\n   */\n  _bufferCache = {};\n\n  /**\n   * Dictionary to store the current progress calls and their callbacks.\n   * @type {object}\n   * @private\n   */\n  _progressCallsAndCallbacks = {};\n\n  /**\n   * True if the loader is disposed.\n   * @type {boolean}\n   * @private\n   */\n  _disposed = false;\n\n  /**\n   * Create the cache.\n   * @param {AudioContext} context The Audio Context\n   */\n  constructor(context) {\n    this._context = context;\n  }\n\n  /**\n   * Loads single or multiple audio resources into audio buffers.\n   * @param {string|string[]} urls Single or array of audio urls\n   * @return {Promise<DownloadResult|Array<DownloadResult>>}\n   */\n  load(urls) {\n    if (typeof urls === 'string') {\n      return this._load(urls);\n    }\n\n    return Promise.all(urls.map(url => this._load(url)));\n  }\n\n  /**\n   * Removes the cached audio buffers.\n   * @param {string|string[]} [urls] Single or array of audio urls\n   */\n  unload(urls) {\n    if (typeof urls === 'string') {\n      this._unload(urls);\n      return;\n    }\n\n    if (Array.isArray(urls)) {\n      urls.forEach(url => this._unload(url), this);\n      return;\n    }\n\n    this._bufferCache = {};\n  }\n\n  /**\n   * Dispose the loader.\n   */\n  dispose() {\n    if (this._disposed) {\n      return;\n    }\n\n    this.unload();\n    this._bufferCache = {};\n    this._progressCallsAndCallbacks = null;\n    this._context = null;\n    this._disposed = true;\n  }\n\n  /**\n   * Loads a single audio resource into audio buffer and cache result if the download is succeeded.\n   * @param {string} url The Audio url\n   * @return {Promise<DownloadResult>}\n   * @private\n   */\n  _load(url) {\n    return new Promise(resolve => {\n      if (this._bufferCache.hasOwnProperty(url)) {\n        resolve(new DownloadResult(url, this._bufferCache[url]));\n        return;\n      }\n\n      if (this._progressCallsAndCallbacks.hasOwnProperty(url)) {\n        this._progressCallsAndCallbacks[url].push(resolve);\n        return;\n      }\n\n      this._progressCallsAndCallbacks[url] = [];\n      this._progressCallsAndCallbacks[url].push(resolve);\n\n      const reject = err => {\n        if (this._disposed) {\n          return;\n        }\n\n        this._progressCallsAndCallbacks[url].forEach(r => r(new DownloadResult(url, null, err)));\n        delete this._progressCallsAndCallbacks[url];\n      };\n\n      const decodeAudioData = arrayBuffer => {\n        if (this._disposed) {\n          return;\n        }\n\n        this._context.decodeAudioData(arrayBuffer, buffer => {\n          this._bufferCache[url] = buffer;\n          this._progressCallsAndCallbacks[url].forEach(r => r(new DownloadResult(url, buffer)));\n          delete this._progressCallsAndCallbacks[url];\n        }, reject);\n      };\n\n      if (utility.isBase64(url)) {\n        const data = atob(url.split(',')[1]);\n        const dataView = new Uint8Array(data.length); // eslint-disable-line no-undef\n\n        for (let i = 0; i < data.length; ++i) {\n          dataView[i] = data.charCodeAt(i);\n        }\n\n        decodeAudioData(dataView);\n        return;\n      }\n\n      const req = new XMLHttpRequest();\n      req.open('GET', url, true);\n      req.responseType = 'arraybuffer';\n\n      req.addEventListener('load', () => decodeAudioData(req.response), false);\n      req.addEventListener('error', reject, false);\n      req.send();\n    });\n  }\n\n  /**\n   * Removes the single cached audio buffer.\n   * @param {string} url Audio url\n   * @private\n   */\n  _unload(url) {\n    delete this._bufferCache[url];\n  }\n}\n\nexport { Loader as default, DownloadResult, DownloadStatus };\n","/**\n * Singleton global event emitter.\n * @class\n */\nclass Emitter {\n\n  /**\n   * Dictionary that maps the objects with their events and handlers.\n   * @type {object}\n   * @private\n   */\n  _objectsEventsHandlersMap = {};\n\n  /**\n   * Subscribes to an event of the passed object.\n   * @param {number} id The unique id of the object.\n   * @param {string} eventName Name of the event\n   * @param {function} handler The event-handler function\n   * @param {boolean} [once = false] Is it one-time subscription or not?\n   * @return {Emitter}\n   */\n  on(id, eventName, handler, once = false) {\n    if (!this._hasObject(id)) {\n      this._objectsEventsHandlersMap[id] = {};\n    }\n\n    const objEvents = this._objectsEventsHandlersMap[id];\n\n    if (!objEvents.hasOwnProperty(eventName)) {\n      objEvents[eventName] = [];\n    }\n\n    objEvents[eventName].push({\n      handler: handler,\n      once: once\n    });\n\n    return this;\n  }\n\n  /**\n   * Un-subscribes from an event of the passed object.\n   * @param {number} id The unique id of the object.\n   * @param {string} eventName The event name.\n   * @param {function} [handler] The handler function.\n   * @return {Emitter}\n   */\n  off(id, eventName, handler) {\n    if (!this._hasEvent(id, eventName)) {\n      return this;\n    }\n\n    const objEvents = this._objectsEventsHandlersMap[id];\n\n    if (!handler) {\n      objEvents[eventName] = [];\n    } else {\n      objEvents[eventName] = objEvents[eventName].filter(eventSubscriber => {\n        return eventSubscriber.handler !== handler;\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Fires an event of the object passing the source and other optional arguments.\n   * @param {number} id The unique id of the object.\n   * @param {string} eventName The event name\n   * @param {...*} args The arguments that to be passed to handler\n   * @return {Emitter}\n   */\n  fire(id, eventName, ...args) {\n    if (!this._hasEvent(id, eventName)) {\n      return this;\n    }\n\n    let eventSubscribers = this._objectsEventsHandlersMap[id][eventName];\n\n    for (let i = 0; i < eventSubscribers.length; i++) {\n      let eventSubscriber = eventSubscribers[i];\n\n      setTimeout(function (subscriber) {\n        const { handler, once } = subscriber;\n\n        handler(...args);\n\n        if (once) {\n          this.off(id, eventName, handler);\n        }\n      }.bind(this, eventSubscriber), 0);\n    }\n\n    return this;\n  }\n\n  /**\n   * Clears the event handlers of the passed object.\n   * @param {number} [id] The unique id of the object.\n   * @return {Emitter}\n   */\n  clear(id) {\n    if (!id) {\n      this._objectsEventsHandlersMap = {};\n      return this;\n    }\n\n    if (this._hasObject(id)) {\n      delete this._objectsEventsHandlersMap[id];\n    }\n\n    return this;\n  }\n\n  /**\n   * Returns true if the object is already registered.\n   * @param {number} id The object id.\n   * @return {boolean}\n   * @private\n   */\n  _hasObject(id) {\n    return this._objectsEventsHandlersMap.hasOwnProperty(id);\n  }\n\n  /**\n   * Returns true if the passed object has an entry of the passed event.\n   * @param {number} id The object id.\n   * @param {string} eventName The event name.\n   * @return {boolean}\n   * @private\n   */\n  _hasEvent(id, eventName) {\n    return this._hasObject(id) && this._objectsEventsHandlersMap[id].hasOwnProperty(eventName);\n  }\n}\n\nexport default new Emitter();\n","/**\n * Stores queue of actions that has to be run before or after specific events.\n */\nclass Queue {\n\n  _eventActions = {};\n\n  /**\n   * Queues the passed action to the event.\n   * @param {string} eventName The event name.\n   * @param {string} actionIdentifier The action identifier.\n   * @param {function} action The action function.\n   * @param {boolean} [removeAfterRun = true] Remove the action once it's run.\n   */\n  add(eventName, actionIdentifier, action, removeAfterRun = true) {\n    if (!this.hasEvent(eventName)) {\n      this._eventActions[eventName] = {};\n    }\n\n    this._eventActions[eventName][actionIdentifier] = { fn: action, removeAfterRun: removeAfterRun };\n  }\n\n  /**\n   * Returns true if there is a event exists for the passed name.\n   * @param {string} eventName The event name.\n   * @return {boolean}\n   */\n  hasEvent(eventName) {\n    return this._eventActions.hasOwnProperty(eventName);\n  }\n\n  /**\n   * Returns true if the passed action is already queued-up.\n   * @param {string} eventName The event name.\n   * @param {string} actionIdentifier The action identifier.\n   * @return {boolean}\n   */\n  hasAction(eventName, actionIdentifier) {\n    if (!this.hasEvent(eventName)) {\n      return false;\n    }\n\n    return this._eventActions[eventName].hasOwnProperty(actionIdentifier);\n  }\n\n  /**\n   * Runs all the actions queued up for the passed event.\n   * @param {string} eventName The event name.\n   * @param {string} [actionIdentifier] The action identifier.\n   */\n  run(eventName, actionIdentifier) {\n    if (!this.hasEvent(eventName)) {\n      return;\n    }\n\n    if (typeof actionIdentifier !== 'undefined') {\n      if (!this.hasAction(eventName, actionIdentifier)) {\n        return;\n      }\n\n      this._run(eventName, actionIdentifier);\n\n      return;\n    }\n\n    Object.keys(this._eventActions[eventName]).forEach(action => this._run(eventName, action));\n  }\n\n  /**\n   * Removes the event or a queued action for the event.\n   * @param {string} eventName The event name.\n   * @param {string} [actionIdentifier] The action identifier.\n   */\n  remove(eventName, actionIdentifier) {\n    if (!this._eventActions.hasOwnProperty(eventName)) {\n      return;\n    }\n\n    if (!actionIdentifier) {\n      delete this._eventActions[eventName];\n      return;\n    }\n\n    delete this._eventActions[eventName][actionIdentifier];\n  }\n\n  /**\n   * Clears all the stored events and the queued-up actions.\n   */\n  clear() {\n    this._eventActions = {};\n  }\n\n  /**\n   * Runs a single action.\n   * @param {string} eventName The event name.\n   * @param {string} actionIdentifier The action identifier.\n   * @private\n   */\n  _run(eventName, actionIdentifier) {\n    const queued = this._eventActions[eventName][actionIdentifier];\n    queued.fn();\n    queued.removeAfterRun && this.remove(eventName, actionIdentifier);\n  }\n}\n\nexport default Queue;\n","import engine, { ErrorType } from './Engine';\nimport Queue from './Queue';\nimport utility from './Utility';\nimport emitter from './Emitter';\nimport { DownloadStatus } from './Loader';\n\n/**\n * Enum that represents the different states of a sound group (buzz).\n * @enum {string}\n */\nconst BuzzState = {\n  Ready: 'ready',\n  Destroyed: 'destroyed'\n};\n\n/**\n * Enum that represents the different events fired by a buzz.\n * @enum {string}\n */\nconst BuzzEvents = {\n  Load: 'load',\n  UnLoad: 'unload',\n  PlayStart: 'playstart',\n  PlayEnd: 'playend',\n  Pause: 'pause',\n  Stop: 'stop',\n  Volume: 'volume',\n  Mute: 'mute',\n  Seek: 'seek',\n  Rate: 'rate',\n  FadeStart: 'fadestart',\n  FadeEnd: 'fadeend',\n  FadeStop: 'fadestop',\n  Error: 'error',\n  Destroy: 'destroy'\n};\n\n/**\n * Enum that represents the different states occurs while loading a sound.\n * @enum {string}\n */\nconst LoadState = {\n  NotLoaded: 'notloaded',\n  Loading: 'loading',\n  Loaded: 'loaded'\n};\n\n/**\n * A wrapper class that simplifies dealing with group of sounds.\n */\nclass Buzz {\n\n  /**\n   * Unique id.\n   * @type {number}\n   * @private\n   */\n  _id = -1;\n\n  /**\n   * Represents the source of the sound. The source can be an url or base64 string.\n   * @type {*}\n   * @private\n   */\n  _src = null;\n\n  /**\n   * The formats of the passed audio sources.\n   * @type {Array<string>}\n   * @private\n   */\n  _format = [];\n\n  /**\n   * The sprite definition.\n   * @type {object}\n   * @private\n   */\n  _sprite = null;\n\n  /**\n   * The current volume of the sound. Should be from 0.0 to 1.0.\n   * @type {number}\n   * @private\n   */\n  _volume = 1.0;\n\n  /**\n   * The current rate of the playback. Should be from 0.5 to 5.\n   * @type {number}\n   * @private\n   */\n  _rate = 1;\n\n  /**\n   * True if the sound is currently muted.\n   * @type {boolean}\n   * @private\n   */\n  _muted = false;\n\n  /**\n   * True if the sound should play repeatedly.\n   * @type {boolean}\n   * @private\n   */\n  _loop = false;\n\n  /**\n   * True to pre-loaded the sound on construction.\n   * @type {boolean}\n   * @private\n   */\n  _preload = false;\n\n  /**\n   * True to auto-play the sound on construction.\n   * @type {boolean}\n   * @private\n   */\n  _autoplay = false;\n\n  /**\n   * The audio buffer.\n   * @type {AudioBuffer}\n   * @private\n   */\n  _buffer = null;\n\n  /**\n   * Duration of the playback in seconds.\n   * @type {number}\n   * @private\n   */\n  _duration = 0;\n\n  /**\n   * The best compatible source in the audio sources passed.\n   * @type {string|null}\n   * @private\n   */\n  _compatibleSrc = null;\n\n  /**\n   * Represents the different states that occurs while loading the sound.\n   * @type {LoadState}\n   * @private\n   */\n  _loadState = LoadState.NotLoaded;\n\n  /**\n   * Represents the state of this group.\n   * @type {BuzzState}\n   * @private\n   */\n  _state = BuzzState.Ready;\n\n  /**\n   * The action queue.\n   * @type {Queue}\n   * @private\n   */\n  _queue = null;\n\n  /**\n   * The audio engine.\n   * @type {Engine}\n   * @private\n   */\n  _engine = null;\n\n  /**\n   * True if the group is currently fading.\n   * @type {boolean}\n   * @private\n   */\n  _fading = false;\n\n  /**\n   * The timer that runs function after the fading is complete.\n   * @type {number|null}\n   * @private\n   */\n  _fadeTimer = null;\n\n  /**\n   * Initializes the internal properties.\n   * @param {string|Array<string>|object} args The input parameters of this sound group.\n   * @param {string} [args.id] The unique id of the sound.\n   * @param {string|string[]} args.src Single or array of audio urls/base64 strings.\n   * @param {number} [args.volume = 1.0] The initial volume of the sound. Should be from 0.0 to 1.0.\n   * @param {number} [args.rate = 1] The initial playback rate of the sound. Should be from 0.5 to 5.0.\n   * @param {boolean} [args.loop = false] True to play the sound repeatedly.\n   * @param {boolean} [args.muted = false] True to be muted initially.\n   * @param {boolean} [args.preload = false] True to pre-load the sound after construction.\n   * @param {boolean} [args.autoplay = false] True to play automatically after construction.\n   * @param {string|string[]} [args.format] The file format(s) of the passed audio source(s).\n   * @param {object} [args.sprite] The sprite definition.\n   * @param {function} [args.onload] Event-handler for the \"load\" event.\n   * @param {function} [args.onunload] Event-handler for the \"unload\" event.\n   * @param {function} [args.onplaystart] Event-handler for the \"playstart\" event.\n   * @param {function} [args.onplayend] Event-handler for the \"playend\" event.\n   * @param {function} [args.onstop] Event-handler for the \"stop\" event.\n   * @param {function} [args.onpause] Event-handler for the \"pause\" event.\n   * @param {function} [args.onmute] Event-handler for the \"mute\" event.\n   * @param {function} [args.onvolume] Event-handler for the \"volume\" event.\n   * @param {function} [args.onrate] Event-handler for the \"rate\" event.\n   * @param {function} [args.onseek] Event-handler for the \"seek\" event.\n   * @param {function} [args.onerror] Event-handler for the \"error\" event.\n   * @param {function} [args.ondestroy] Event-handler for the \"destroy\" event.\n   * @constructor\n   */\n  constructor(args) {\n    // Setup the audio engine.\n    this._engine = engine;\n    this._engine.setup();\n\n    // If no audio is available throw error.\n    if (!this._engine.isAudioAvailable()) {\n      this._fire(BuzzEvents.Error, null, { type: ErrorType.NoAudio, error: 'Web Audio is un-available' });\n      return this;\n    }\n\n    if (typeof args === 'string') {\n      this._src = [args];\n    } else if (Array.isArray(args) && args.length) {\n      this._src = args;\n    } else if (typeof args === 'object') {\n      const {\n        id,\n        src,\n        format,\n        sprite,\n        volume,\n        rate,\n        muted,\n        loop,\n        autoplay,\n        preload,\n        onload,\n        onunload,\n        onplaystart,\n        onplayend,\n        onstop,\n        onpause,\n        onmute,\n        onvolume,\n        onrate,\n        onseek,\n        onerror,\n        ondestroy\n      } = args;\n\n      // Set the passed id or the random one.\n      this._id = typeof id === 'number' ? id : utility.id();\n\n      // Set the source.\n      if (typeof src === 'string') {\n        this._src = [src];\n      } else if(Array.isArray(src) && src.length) {\n        this._src = src;\n      }\n\n      // Set the format.\n      if (Array.isArray(format)) {\n        this._format = format;\n      } else if (typeof format === 'string' && format) {\n        this._format = [format];\n      }\n\n      // Set other properties.\n      typeof sprite === 'object' && (this._sprite = sprite);\n      typeof volume === 'number' && volume >= 0 && volume <= 1.0 && (this._volume = volume);\n      typeof rate === 'number' && rate >= 0.5 && rate <= 5 && (this._rate = rate);\n      typeof muted === 'boolean' && (this._muted = muted);\n      typeof loop === 'boolean' && (this._loop = loop);\n      typeof autoplay === 'boolean' && (this._autoplay = autoplay);\n      typeof preload === 'boolean' && (this._preload = preload);\n      typeof onload === 'function' && this.on(BuzzEvents.Load, onload);\n      typeof onunload === 'function' && this.on(BuzzEvents.UnLoad, onunload);\n\n      // Bind the passed event handlers to events.\n      typeof onplaystart === 'function' && this.on(BuzzEvents.PlayStart, onplaystart);\n      typeof onplayend === 'function' && this.on(BuzzEvents.PlayEnd, onplayend);\n      typeof onstop === 'function' && this.on(BuzzEvents.Stop, onstop);\n      typeof onpause === 'function' && this.on(BuzzEvents.Pause, onpause);\n      typeof onmute === 'function' && this.on(BuzzEvents.Mute, onmute);\n      typeof onvolume === 'function' && this.on(BuzzEvents.Volume, onvolume);\n      typeof onrate === 'function' && this.on(BuzzEvents.Rate, onrate);\n      typeof onseek === 'function' && this.on(BuzzEvents.Seek, onseek);\n      typeof onerror === 'function' && this.on(BuzzEvents.Error, onerror);\n      typeof ondestroy === 'function' && this.on(BuzzEvents.Destroy, ondestroy);\n    }\n\n    // Throw error if source is not passed.\n    if (!this._src) {\n      throw new Error('You should pass the source for the audio.');\n    }\n\n    // Instantiate the dependencies.\n    this._queue = new Queue();\n\n    if (this._autoplay) {\n      this.play();\n    } else if (this._preload) {\n      this.load();\n    }\n  }\n\n  /**\n   * Loads the sound to the underlying audio object.\n   * @return {Buzz}\n   */\n  load() {\n    // If the sound is already loaded return without reloading again.\n    if (this.isLoaded() || this._loadState === LoadState.Loading) {\n      return this;\n    }\n\n    // Set the state to \"Loading\" to avoid loading multiple times.\n    this._loadState = LoadState.Loading;\n\n    // Get the compatible source.\n    const src = this._compatibleSrc || (this._compatibleSrc = this.getCompatibleSource());\n\n    // If no compatible source found call failure method and return.\n    if (!src) {\n      this._onLoadFailure('The audio formats you passed are not supported');\n      return this;\n    }\n\n    // Load the audio source.\n    this._engine.load(src).then(downloadResult => {\n      // During the time of loading... if the buzz is unloaded or destroyed then return.\n      if (this._loadState === LoadState.NotLoaded || this._state === BuzzState.Destroyed) {\n        return;\n      }\n\n      // If loading succeeded,\n      // i. Save the result.\n      // ii. Set the load state as loaded.\n      // iii. Fire the load event.\n      // iv. Run the methods that are queued to run after successful load.\n      if (downloadResult.status === DownloadStatus.Success) {\n        this._buffer = downloadResult.value;\n        this._duration = this._buffer.duration;\n        this._loadState = LoadState.Loaded;\n        this._fire(BuzzEvents.Load, null, downloadResult);\n        this._queue.run('after-load');\n        return;\n      }\n\n      this._onLoadFailure(downloadResult.error);\n    });\n\n    return this;\n  }\n\n  /**\n   * Called on failure of loading audio source.\n   * @param {*} error The audio source load error.\n   * @private\n   */\n  _onLoadFailure(error) {\n    // Remove the queued actions from this class that are supposed to run after load.\n    this._queue.remove('after-load');\n\n    // Set the load state back to not loaded.\n    this._loadState = LoadState.NotLoaded;\n\n    // Fire the error event.\n    this._fire(BuzzEvents.Error, null, { type: ErrorType.LoadError, error: error });\n  }\n\n  /**\n   * Returns the first compatible source based on the passed sources and the format.\n   * @return {string}\n   */\n  getCompatibleSource() {\n    // If the user has passed \"format\", check if it is supported or else retrieve the first supported source from the array.\n    return this._format.length ?\n      this._src[this._format.indexOf(utility.getSupportedFormat(this._format))] :\n      utility.getSupportedSource(this._src);\n  }\n\n  /**\n   * Plays the passed sound defined in the sprite or the sound that belongs to the passed id.\n   * @param {string|number} [soundOrId] The sound name defined in sprite or the sound id.\n   * @return {Buzz|number}\n   */\n  play(soundOrId) {\n    const isIdPassed = typeof soundOrId === 'number';\n\n    // If id is passed then get the sound from the engine and play it.\n    if (isIdPassed) {\n      const sound = this._engine.sound(soundOrId);\n\n      if (sound) {\n        sound.play();\n        this._fire(BuzzEvents.PlayStart, soundOrId);\n      }\n\n      return this;\n    }\n\n    const newSoundId = utility.id(),\n      playSound = () => {\n        const soundArgs = {\n          id: newSoundId,\n          buffer: this._buffer,\n          volume: this._volume,\n          rate: this._rate,\n          muted: this._muted,\n          loop: this._loop,\n          playEndCallback: sound => this._fire(BuzzEvents.PlayEnd, sound.id()),\n          destroyCallback: sound => {\n            this._fire(BuzzEvents.Destroy, sound.id());\n            emitter.clear(sound.id());\n          },\n          fadeEndCallback: sound => this._fire(BuzzEvents.FadeEnd, sound.id())\n        };\n\n        if (typeof soundOrId === 'string' && this._sprite && this._sprite.hasOwnProperty(soundOrId)) {\n          const positions = this._sprite[soundOrId];\n          soundArgs.startPos = positions[0];\n          soundArgs.endPos = positions[1];\n        }\n\n        const newSound = this._engine.sound(this._compatibleSrc, this._id, soundArgs);\n        newSound.play();\n\n        this._fire(BuzzEvents.PlayStart, newSound.id());\n      };\n\n    // If the sound is not yet loaded push an action to the queue to play the sound once it's loaded.\n    if (!this.isLoaded()) {\n      this._queue.add('after-load', `play-${newSoundId}`, () => playSound());\n      this.load();\n    } else {\n      playSound();\n    }\n\n    return newSoundId;\n  }\n\n  /**\n   * Pauses the sound belongs to the passed id or all the sounds belongs to this group.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  pause(id) {\n    this._queue.remove('after-load', id ? `play-${id}` : null);\n    typeof id !== 'number' && this.fadeStop();\n    this._sounds(id).forEach(sound => sound.pause());\n    this._fire(BuzzEvents.Pause, id);\n\n    return this;\n  }\n\n  /**\n   * Stops the sound belongs to the passed id or all the sounds belongs to this group.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  stop(id) {\n    this._queue.remove('after-load', id ? `play-${id}` : null);\n    typeof id !== 'number' && this.fadeStop();\n    this._sounds(id).forEach(sound => sound.stop());\n    this._fire(BuzzEvents.Stop, id);\n\n    return this;\n  }\n\n  /**\n   * Mutes the sound belongs to the passed id or all the sounds belongs to this group.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  mute(id) {\n    const isGroup = typeof id !== 'number';\n    isGroup && this.fadeStop();\n    this._sounds(id).forEach(sound => sound.mute());\n    isGroup && (this._muted = true);\n\n    this._fire(BuzzEvents.Mute, id, this._muted);\n\n    return this;\n  }\n\n  /**\n   * Un-mutes the sound belongs to the passed id or all the sounds belongs to this group.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  unmute(id) {\n    const isGroup = typeof id !== 'number';\n    isGroup && this.fadeStop();\n    this._sounds(id).forEach(sound => sound.unmute());\n    isGroup && (this._muted = false);\n\n    this._fire(BuzzEvents.Mute, id, this._muted);\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the volume of the passed sound or the group.\n   * @param {number} [volume] Should be from 0.0 to 1.0.\n   * @param {number} [id] The sound id.\n   * @return {Buzz|number}\n   */\n  volume(volume, id) {\n    const isGroup = typeof id !== 'number';\n\n    if (typeof volume === 'number' && volume >= 0 && volume <= 1.0) {\n      isGroup && this.fadeStop();\n      this._sounds(id).forEach(sound => sound.volume(volume));\n      typeof id !== 'number' && (this._volume = volume);\n      this._fire(BuzzEvents.Volume, id, this._volume);\n      return this;\n    }\n\n    if (!isGroup) {\n      const sound = this._engine.sound(id);\n      return sound ? sound.volume() : null;\n    }\n\n    return this._volume;\n  }\n\n  /**\n   * Fades the group's or passed sound's volume to the passed value in the passed duration.\n   * @param {number} to The destination volume.\n   * @param {number} duration The period of fade in seconds.\n   * @param {string} [type = linear] The fade type (linear or exponential).\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  fade(to, duration, type = 'linear', id) {\n    const isGroup = typeof id !== 'number';\n\n    if (isGroup && this._fading) {\n      return this;\n    }\n\n    this._fire(BuzzEvents.FadeStart, id);\n\n    this._sounds(id).forEach(sound => sound.fade(to, duration, type));\n\n    if (isGroup) {\n      this._fading = true;\n\n      this._fadeTimer = setTimeout(() => {\n        this.volume(to);\n\n        clearTimeout(this._fadeTimer);\n\n        this._fadeTimer = null;\n        this._fading = false;\n        this._fire(BuzzEvents.FadeEnd);\n      }, duration * 1000);\n    }\n  }\n\n  /**\n   * Stops the group's or passed sound's current running fade.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  fadeStop(id) {\n    const isGroup = typeof id !== 'number';\n\n    if (isGroup && !this._fading) {\n      return this;\n    }\n\n    this._sounds(id).forEach(sound => sound.fadeStop());\n\n    if (isGroup) {\n      if (this._fadeTimer) {\n        clearTimeout(this._fadeTimer);\n        this._fadeTimer = null;\n      }\n\n      this._fading = false;\n    }\n\n    this._fire(BuzzEvents.FadeStop, id);\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the rate of the passed sound or the group.\n   * @param {number} [rate] Should be from 0.5 to 5.0.\n   * @param {number} [id] The sound id.\n   * @return {Buzz|number}\n   */\n  rate(rate, id) {\n    if (typeof rate === 'number' && rate >= 0.5 && rate <= 5) {\n      this._sounds(id).forEach(sound => sound.rate(rate));\n      typeof id !== 'number' && (this._rate = rate);\n      this._fire(BuzzEvents.Rate, id, this._rate);\n      return this;\n    }\n\n    if (typeof id === 'number') {\n      const sound = this._engine.sound(id);\n      return sound ? sound.rate() : null;\n    }\n\n    return this._rate;\n  }\n\n  /**\n   * Gets/sets the current playback position of the sound.\n   * @param {number} id The sound id\n   * @param {number} [seek] The seek position.\n   * @return {Buzz|number}\n   */\n  seek(id, seek) {\n    const sound = this._engine.sound(id);\n\n    if (!sound) {\n      return this;\n    }\n\n    if (typeof seek === 'number') {\n      // If the audio source is not yet loaded push an item to the queue to seek after the sound is loaded\n      // and load the sound.\n      if (!this.isLoaded()) {\n        this._queue.add('after-load', `seek-${id}`, () => this.seek(id, seek));\n        this.load();\n        return this;\n      }\n\n      sound.seek(seek);\n      this._fire(BuzzEvents.Seek, id, seek);\n      return this;\n    }\n\n    return sound.seek();\n  }\n\n  /**\n   * Gets/sets the looping behavior of a sound or the group.\n   * @param {boolean} [loop] True to loop the sound.\n   * @param {number} [id] The sound id.\n   * @return {Buzz|boolean}\n   */\n  loop(loop, id) {\n    if (typeof loop === 'boolean') {\n      this._sounds(id).forEach(sound => sound.loop(loop));\n      typeof id !== 'number' && (this._loop = loop);\n      return this;\n    }\n\n    if (typeof id === 'number') {\n      const sound = this._engine.sound(id);\n      return sound ? sound.loop() : null;\n    }\n\n    return this._loop;\n  }\n\n  /**\n   * Returns true if the passed sound is playing.\n   * @param {number} id The sound id.\n   * @return {boolean}\n   */\n  playing(id) {\n    const sound = this._engine.sound(id);\n    return sound ? sound.isPlaying() : null;\n  }\n\n  /**\n   * Returns true if the passed sound is muted or the group is muted.\n   * @param {number} [id] The sound id.\n   * @return {boolean}\n   */\n  muted(id) {\n    if(typeof id === 'number') {\n      const sound = this._engine.sound(id);\n      return sound ? sound.muted() : null;\n    }\n\n    return this._muted;\n  }\n\n  /**\n   * Returns the state of the passed sound or the group.\n   * @return {BuzzState|SoundState}\n   */\n  state(id) {\n    if(typeof id === 'number') {\n      const sound = this._engine.sound(id);\n      return sound ? sound.state() : null;\n    }\n\n    return this._state;\n  }\n\n  /**\n   * Returns the duration of the passed sound or the total duration of the sound.\n   * @param {number} [id] The sound id.\n   * @return {number}\n   */\n  duration(id) {\n    if (typeof id === 'number') {\n      const sound = this._engine.sound(id);\n      return sound ? sound.duration() : null;\n    }\n\n    return this._duration;\n  }\n\n  /**\n   * Unloads the loaded audio buffer.\n   * @return {Buzz}\n   */\n  unload() {\n    this._queue.remove('after-load');\n    this._engine.unload(this._compatibleSrc);\n    this._buffer = null;\n    this._duration = 0;\n    this._loadState = LoadState.NotLoaded;\n    return this;\n  }\n\n  /**\n   * Stops and destroys all the sounds belong to this group and release other dependencies.\n   */\n  destroy() {\n    if (this._state === BuzzState.Destroyed) {\n      return this;\n    }\n\n    this.stop();\n    this._queue.clear();\n    this._engine.free(false, this._id);\n\n    this._buffer = null;\n    this._queue = null;\n    this._engine = null;\n    this._state = BuzzState.Destroyed;\n\n    this._fire(BuzzEvents.Destroy);\n\n    emitter.clear(this._id);\n  }\n\n  /**\n   * Subscribes to an event for the sound or the group.\n   * @param {string} eventName The event name.\n   * @param {function} handler The event handler.\n   * @param {boolean} [once = false] True for one-time event handling.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  on(eventName, handler, once = false, id) {\n    emitter.on(id || this._id, eventName, handler, once);\n    return this;\n  }\n\n  /**\n   * Un-subscribes from an event for the sound or the group.\n   * @param {string} eventName The event name.\n   * @param {function} handler The event handler.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  off(eventName, handler, id) {\n    emitter.off(id || this._id, eventName, handler);\n    return this;\n  }\n\n  /**\n   * Returns the unique id of the sound.\n   * @return {number}\n   */\n  id() {\n    return this._id;\n  }\n\n  /**\n   * Returns the audio resource loading status.\n   * @return {LoadState}\n   */\n  loadState() {\n    return this._loadState;\n  }\n\n  /**\n   * Returns true if the audio source is loaded.\n   * @return {boolean}\n   */\n  isLoaded() {\n    return this._loadState === LoadState.Loaded;\n  }\n\n  /**\n   * Returns the sound for the passed id.\n   * @param {number} id The sound id.\n   * @return {Sound}\n   */\n  sound(id) {\n    return this._engine.sound(id);\n  }\n\n  /**\n   * Returns true if the passed sound exists.\n   * @param {number} id The sound id.\n   * @return {boolean}\n   */\n  alive(id) {\n    return Boolean(this.sound(id));\n  }\n\n  /**\n   * Returns the sound for the passed id or all the sounds belong to this group.\n   * @param {number} [id] The sound id.\n   * @return {Array<Sound>}\n   * @private\n   */\n  _sounds(id) {\n    if (typeof id === 'number') {\n      const sound = this._engine.sound(id);\n      return sound ? [sound] : [];\n    }\n\n    return this._engine.sounds(this._id);\n  }\n\n  /**\n   * Fires an event of group or sound.\n   * @param {string} eventName The event name.\n   * @param {number} [id] The sound id.\n   * @param {...*} args The arguments that to be passed to handler.\n   * @return {Buzz}\n   * @private\n   */\n  _fire(eventName, id, ...args) {\n    if (id) {\n      emitter.fire(id, eventName, ...args, this.sound(id), this);\n      emitter.fire(this._id, eventName, ...args, this.sound(id), this);\n    } else {\n      emitter.fire(this._id, eventName, ...args, this);\n    }\n\n    return this;\n  }\n}\n\nconst $buzz = args => new Buzz(args);\n[\n  'setup',\n  'load',\n  'unload',\n  'mute',\n  'unmute',\n  'volume',\n  'stop',\n  'suspend',\n  'resume',\n  'terminate',\n  'muted',\n  'state',\n  'context',\n  'isAudioAvailable',\n  'on',\n  'off'\n].forEach(method => {\n  $buzz[method] = function () {\n    const result = engine[method](...arguments);\n    return result === engine ? $buzz : result;\n  };\n});\n\nmodule.exports = $buzz;\n","/**\n * Represents a heap item.\n */\nclass HeapItem {\n\n  /**\n   * The sound object.\n   * @type {Sound}\n   */\n  sound = null;\n\n  /**\n   * The group id.\n   * @type {number|null}\n   */\n  groupId = null;\n\n  /**\n   * Set the group id and sound.\n   * @param {number} groupId The group id.\n   * @param {Sound} sound The sound instance.\n   */\n  constructor(groupId, sound) {\n    this.groupId = groupId;\n    this.sound = sound;\n  }\n}\n\n/**\n * Represents a collection of sounds belong to an audio resource.\n */\nclass HeapItemCollection {\n\n  /**\n   * The audio source url.\n   * @type {string|null}\n   */\n  url = null;\n\n  /**\n   * The collection of sound objects.\n   * @type {object}\n   */\n  items = {};\n\n  /**\n   * Adds a new sound item to the collection.\n   * @param {number} groupId The group id.\n   * @param {Sound} sound The sound instance.\n   */\n  add(groupId, sound) {\n    const soundId = sound.id().toString();\n\n    if (this.items.hasOwnProperty(soundId)) {\n      return;\n    }\n\n    this.items[soundId] = new HeapItem(groupId, sound);\n  }\n\n  /**\n   * Removes the sounds.\n   * @param {boolean} [idle = true] True to destroy only the idle sounds.\n   * @param {number} [groupId] The group id.\n   */\n  free(idle = true, groupId) {\n    Object.values(this.items).forEach(item => {\n      const { sound, soundGroupId } = item;\n\n      if(idle && (sound.isPlaying() || sound.isPaused())) {\n        return;\n      }\n\n      if (!Boolean(groupId) || soundGroupId === groupId) {\n        sound.destroy();\n        delete this.items[sound.id()];\n      }\n    });\n  }\n\n  /**\n   * Returns the sounds belong to the group or all the sounds in the collection.\n   * @param {number} [groupId] The group id.\n   * @return {Array<HeapItem>}\n   */\n  sounds(groupId) {\n    const itemsArray = Object.values(this.items);\n    const items = groupId ? itemsArray.filter(item => item.groupId === groupId) : itemsArray;\n    return items.map(item => item.sound);\n  }\n\n  /**\n   * Destroys all the sounds.\n   */\n  destroy() {\n    Object.values(this.items).forEach(item => item.sound.destroy());\n    this.items = {};\n  }\n}\n\n/**\n * Stores all the created sounds.\n */\nclass Heap {\n\n  /**\n   * The sound collections.\n   * @type {object}\n   * @private\n   */\n  _collections = {};\n\n  /**\n   * Initialize stuff.\n   */\n  constructor() {\n    this.free = this.free.bind(this);\n  }\n\n  /**\n   * Adds a new sound to the respective collection.\n   * @param {string} url The audio source url or base64 string.\n   * @param {number} groupId The group id.\n   * @param {Sound} sound The sound instance.\n   */\n  add(url, groupId, sound) {\n    if (!this._collections.hasOwnProperty(url)) {\n      this._collections[url] = new HeapItemCollection();\n    }\n\n    this._collections[url].add(groupId, sound);\n  }\n\n  /**\n   * Returns the sound based on the id.\n   * @param {number} id The sound id.\n   */\n  sound(id) {\n    return this.sounds().find(sound => sound.id() === id);\n  }\n\n  /**\n   * Returns the sounds belongs to a particular group or all of them.\n   * @param {number} [groupId] The group id.\n   * @return {Array}\n   */\n  sounds(groupId) {\n    const sounds = [];\n    Object.values(this._collections).forEach(col => sounds.push(...col.sounds(groupId)));\n    return sounds;\n  }\n\n  /**\n   * Removes sounds from the collections.\n   * @param {boolean} [idle = true] True to destroy only the idle sounds.\n   * @param {number} [groupId] The group id.\n   */\n  free(idle = true, groupId) {\n    Object.values(this._collections).forEach(col => col.free(idle, groupId));\n  }\n\n  /**\n   * Destroys all the sounds.\n   */\n  destroy() {\n    Object.values(this._collections).forEach(col => col.destroy());\n    this._collections = {};\n  }\n}\n\nexport default Heap;\n","import engine from './Engine';\nimport utility from './Utility';\n\n/**\n * Enum that represents the different states of a sound.\n * @enum {string}\n */\nconst SoundState = {\n  Ready: 'ready',\n  Playing: 'playing',\n  Paused: 'paused',\n  Destroyed: 'destroyed'\n};\n\n/**\n * Represents a sound created using Web Audio API.\n * @class\n */\nclass Sound {\n\n  /**\n   * Unique id.\n   * @type {number}\n   * @private\n   */\n  _id = -1;\n\n  /**\n   * The current volume of the sound. Should be from 0.0 to 1.0.\n   * @type {number}\n   * @private\n   */\n  _volume = 1.0;\n\n  /**\n   * The current playback speed. Should be from 0.5 to 5.\n   * @type {number}\n   * @private\n   */\n  _rate = 1;\n\n  /**\n   * True if the sound is currently muted.\n   * @type {boolean}\n   * @private\n   */\n  _muted = false;\n\n  /**\n   * True if the sound should play repeatedly.\n   * @type {boolean}\n   * @private\n   */\n  _loop = false;\n\n  /**\n   * The current state (playing, paused etc.) of the sound.\n   * @type {SoundState}\n   * @private\n   */\n  _state = SoundState.Ready;\n\n  /**\n   * Web API's audio context.\n   * @type {AudioContext}\n   * @private\n   */\n  _context = null;\n\n  /**\n   * The gain node to control the volume of the sound.\n   * @type {GainNode}\n   * @private\n   */\n  _gainNode = null;\n\n  /**\n   * The audio buffer.\n   * @type {AudioBuffer}\n   * @private\n   */\n  _buffer = null;\n\n  /**\n   * The AudioBufferSourceNode that plays the audio buffer assigned to it.\n   * @type {AudioBufferSourceNode}\n   * @private\n   */\n  _bufferSourceNode = null;\n\n  /**\n   * Duration of the playback in seconds.\n   * @type {number}\n   * @private\n   */\n  _duration = 0;\n\n  /**\n   * The playback start position.\n   * @type {number}\n   * @private\n   */\n  _startPos = 0;\n\n  /**\n   * The playback end position.\n   * @type {number}\n   * @private\n   */\n  _endPos = 0;\n\n  /**\n   * The current position of the playback.\n   * @type {number}\n   * @private\n   */\n  _currentPos = 0;\n\n  /**\n   * The position of the playback during rate change.\n   * @type {number}\n   * @private\n   */\n  _rateSeek = 0;\n\n  /**\n   * The time at which the playback started.\n   * This property is required for getting the seek position of the playback.\n   * @type {number}\n   * @private\n   */\n  _startTime = 0;\n\n  /**\n   * The callback that will be invoked after the play ends.\n   * @type {function}\n   * @private\n   */\n  _playEndCallback = null;\n\n  /**\n   * The callback that will be invoked after the sound destroyed.\n   * @type {function}\n   * @private\n   */\n  _destroyCallback = null;\n\n  /**\n   * True if the sound is currently fading.\n   * @type {boolean}\n   * @private\n   */\n  _fading = false;\n\n  /**\n   * The timer that runs function after the fading is complete.\n   * @type {number|null}\n   * @private\n   */\n  _fadeTimer = null;\n\n  /**\n   * The callback that will be invoked after the fade is completed.\n   * @type {function}\n   * @private\n   */\n  _fadeEndCallback = null;\n\n  /**\n   * Initializes the internal properties of the sound.\n   * @param {object} args The input parameters of the sound.\n   * @param {string} [args.id] The unique id of the sound.\n   * @param {AudioBuffer} [args.buffer] Audio source buffer.\n   * @param {number} [args.volume = 1.0] The initial volume of the sound. Should be from 0.0 to 1.0.\n   * @param {number} [args.rate = 1] The initial playback rate of the sound. Should be from 0.5 to 5.0.\n   * @param {boolean} [args.loop = false] True to play the sound repeatedly.\n   * @param {boolean} [args.muted = false] True to be muted initially.\n   * @param {number} [args.startPos] The playback start position.\n   * @param {number} [args.endPos] The playback end position.\n   * @param {function} [args.playEndCallback] The callback that will be invoked after the play ends.\n   * @param {function} [args.destroyCallback] The callback that will be invoked after destroyed.\n   * @param {function} [args.fadeEndCallback] The callback that will be invoked the fade is completed.\n   * @constructor\n   */\n  constructor(args) {\n    const {\n      id,\n      buffer,\n      volume,\n      rate,\n      loop,\n      muted,\n      startPos,\n      endPos,\n      playEndCallback,\n      destroyCallback,\n      fadeEndCallback\n    } = args;\n\n    // Set the passed id or the random one.\n    this._id = typeof id === 'number' ? id : utility.id();\n\n    // Set the passed audio buffer and duration.\n    this._buffer = buffer;\n    this._endPos = this._buffer.duration;\n\n    // Set other properties.\n    volume && (this._volume = volume);\n    rate && (this._rate = rate);\n    muted && (this._muted = muted);\n    loop && (this._loop = loop);\n    startPos && (this._startPos = startPos);\n    endPos && (this._endPos = endPos);\n    this._playEndCallback = playEndCallback;\n    this._destroyCallback = destroyCallback;\n    this._fadeEndCallback = fadeEndCallback;\n\n    // Calculate the duration.\n    this._duration = this._endPos - this._startPos;\n\n    // Create gain node and set the volume.\n    this._context = engine.context();\n    this._gainNode = this._context.createGain();\n    this._gainNode.gain.setValueAtTime(this._muted ? 0 : this._volume, this._context.currentTime);\n  }\n\n  /**\n   * Plays the sound or the sound defined in the sprite.\n   * @return {Sound}\n   */\n  play() {\n    // If the sound is already playing then return.\n    if (this.isPlaying()) {\n      return this;\n    }\n\n    // Get the playback starting position.\n    let seek = Math.max(0, this._currentPos > 0 ? this._currentPos : this._startPos);\n\n    // Create a new buffersourcenode to play the sound.\n    this._bufferSourceNode = this._context.createBufferSource();\n\n    // Set the buffer, playback rate and loop parameters\n    this._bufferSourceNode.buffer = this._buffer;\n    this._bufferSourceNode.playbackRate.setValueAtTime(this._rate, this._context.currentTime);\n    this._setLoop(this._loop);\n\n    // Connect the node to the audio graph.\n    this._bufferSourceNode.connect(this._gainNode);\n\n    // Listen to the \"ended\" event to reset/clean things.\n    this._bufferSourceNode.addEventListener('ended', () => {\n      // Reset the seek positions\n      this._currentPos = 0;\n      this._rateSeek = 0;\n\n      // Destroy the node (AudioBufferSourceNodes are one-time use and throw objects).\n      this._destroyBufferNode();\n\n      // Reset the state to allow future actions.\n      this._state = SoundState.Ready;\n\n      // Invoke the callback if there is one.\n      this._playEndCallback && this._playEndCallback(this);\n    });\n\n    const startTime = this._context.currentTime;\n\n    // Call the supported method to play the sound.\n    if (typeof this._bufferSourceNode.start !== 'undefined') {\n      this._bufferSourceNode.start(startTime, seek, this._loop ? undefined : this._duration);\n    } else {\n      this._bufferSourceNode.noteGrainOn(startTime, seek, this._loop ? undefined : this._duration);\n    }\n\n    // Record the starting time and set the state.\n    this._startTime = startTime;\n    this._state = SoundState.Playing;\n\n    return this;\n  }\n\n  /**\n   * Pauses the playing sound.\n   * @return {Sound}\n   */\n  pause() {\n    // If the sound is already playing return.\n    if (!this.isPlaying()) {\n      return this;\n    }\n\n    // Stop the current running fade.\n    this.fadeStop();\n\n    // Save the current position and reset rateSeek.\n    this._currentPos = this.seek();\n    this._rateSeek = 0;\n\n    this._destroyBufferNode();\n\n    this._state = SoundState.Paused;\n\n    return this;\n  }\n\n  /**\n   * Stops the sound that is playing or in paused state.\n   * @return {Sound}\n   */\n  stop() {\n    // If the sound is not playing or paused return.\n    if (!this.isPlaying() && !this.isPaused()) {\n      return this;\n    }\n\n    // Stop the current running fade.\n    this.fadeStop();\n\n    // Reset the variables\n    this._currentPos = 0;\n    this._rateSeek = 0;\n\n    this._destroyBufferNode();\n\n    this._state = SoundState.Ready;\n\n    return this;\n  }\n\n  /**\n   * Mutes the sound.\n   * @return {Sound}\n   */\n  mute() {\n    // Stop the current running fade.\n    this.fadeStop();\n\n    // Set the value of gain node to 0.\n    this._gainNode.gain.setValueAtTime(0, this._context.currentTime);\n\n    // Set the muted property true.\n    this._muted = true;\n\n    return this;\n  }\n\n  /**\n   * Un-mutes the sound.\n   * @return {Sound}\n   */\n  unmute() {\n    // Stop the current running fade.\n    this.fadeStop();\n\n    // Reset the gain node's value back to volume.\n    this._gainNode.gain.setValueAtTime(this._volume, this._context.currentTime);\n\n    // Set the muted property to false.\n    this._muted = false;\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the volume.\n   * @param {number} [vol] Should be from 0.0 to 1.0.\n   * @return {Sound|number}\n   */\n  volume(vol) {\n    // If no input parameter is passed then return the volume.\n    if (typeof vol === 'undefined') {\n      return this._volume;\n    }\n\n    // Stop the current running fade.\n    this.fadeStop();\n\n    // Set the gain's value to the passed volume.\n    this._gainNode.gain.setValueAtTime(this._muted ? 0 : vol, this._context.currentTime);\n\n    // Set the volume to the property.\n    this._volume = vol;\n\n    return this;\n  }\n\n  /**\n   * Fades the sound volume to the passed value in the passed duration.\n   * @param {number} to The destination volume.\n   * @param {number} duration The period of fade.\n   * @param {string} [type = linear] The fade type (linear or exponential).\n   * @return {Sound}\n   */\n  fade(to, duration, type = 'linear') {\n    // If a fade is already running stop it.\n    if (this._fading) {\n      this.fadeStop();\n    }\n\n    this._fading = true;\n\n    if (type === 'linear') {\n      this._gainNode.gain.linearRampToValueAtTime(to, this._context.currentTime + duration);\n    } else {\n      this._gainNode.gain.exponentialRampToValueAtTime(to, this._context.currentTime + duration);\n    }\n\n    this._fadeTimer = setTimeout(() => {\n      this.volume(to);\n\n      clearTimeout(this._fadeTimer);\n\n      this._fadeTimer = null;\n      this._fading = false;\n\n      this._fadeEndCallback && this._fadeEndCallback(this);\n    }, duration * 1000);\n\n    return this;\n  }\n\n  /**\n   * Stops the current running fade.\n   * @return {Sound}\n   */\n  fadeStop() {\n    if (!this._fading) {\n      return this;\n    }\n\n    this._gainNode.gain.cancelScheduledValues(this._context.currentTime);\n\n    if (this._fadeTimer) {\n      clearTimeout(this._fadeTimer);\n      this._fadeTimer = null;\n    }\n\n    this._fading = false;\n    this.volume(this._gainNode.gain.value);\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the playback rate.\n   * @param {number} [rate] The playback rate. Should be from 0.5 to 5.\n   * @return {Sound|number}\n   */\n  rate(rate) {\n    // If no input parameter is passed return the current rate.\n    if (typeof rate === 'undefined') {\n      return this._rate;\n    }\n\n    this._rate = rate;\n    this._rateSeek = this.seek();\n\n    if (this.isPlaying()) {\n      this._startTime = this._context.currentTime;\n      this._bufferSourceNode && (this._bufferSourceNode.playbackRate.setValueAtTime(rate, this._context.currentTime));\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the seek position.\n   * @param {number} [seek] The seek position.\n   * @return {Sound|number}\n   */\n  seek(seek) {\n    // If no parameter is passed return the current position.\n    if (typeof seek === 'undefined') {\n      const realTime = this.isPlaying() ? this._context.currentTime - this._startTime : 0;\n      const rateElapsed = this._rateSeek ? this._rateSeek - this._currentPos : 0;\n\n      return this._currentPos + (rateElapsed + realTime * this._rate);\n    }\n\n    // If seeking outside the borders then return.\n    if (seek < this._startPos || seek > this._endPos) {\n      return this;\n    }\n\n    // If the sound is currently playing... pause it, set the seek position and then continue playing.\n    const isPlaying = this.isPlaying();\n\n    if (isPlaying) {\n      this.pause();\n    }\n\n    this._currentPos = seek;\n\n    if (isPlaying) {\n      this.play();\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the loop parameter of the sound.\n   * @param {boolean} [loop] True to loop the sound.\n   * @return {Sound/boolean}\n   */\n  loop(loop) {\n    if (typeof loop !== 'boolean') {\n      return this._loop;\n    }\n\n    this._loop = loop;\n    this._setLoop(loop);\n\n    return this;\n  }\n\n  /**\n   * Destroys the dependencies and release the memory.\n   * @return {Sound}\n   */\n  destroy() {\n    // If the sound is already destroyed return.\n    if (this._state === SoundState.Destroyed) {\n      return this;\n    }\n\n    // Stop the sound.\n    this.stop();\n\n    this._gainNode.disconnect();\n\n    this._buffer = null;\n    this._context = null;\n    this._gainNode = null;\n\n    // Set the state to \"destroyed\".\n    this._state = SoundState.Destroyed;\n\n    this._destroyCallback && this._destroyCallback(this);\n\n    return this;\n  }\n\n  /**\n   * Returns the unique id of the sound.\n   * @return {number}\n   */\n  id() {\n    return this._id;\n  }\n\n  /**\n   * Returns whether the sound is muted or not.\n   * @return {boolean}\n   */\n  muted() {\n    return this._muted;\n  }\n\n  /**\n   * Returns the state of the sound.\n   * @return {SoundState}\n   */\n  state() {\n    return this._state;\n  }\n\n  /**\n   * Returns the total duration of the playback.\n   * @return {number}\n   */\n  duration() {\n    return this._duration;\n  }\n\n  /**\n   * Returns true if the buzz is playing.\n   * @return {boolean}\n   */\n  isPlaying() {\n    return this._state === SoundState.Playing;\n  }\n\n  /**\n   * Returns true if buzz is paused.\n   * @return {boolean}\n   */\n  isPaused() {\n    return this._state === SoundState.Paused;\n  }\n\n  /**\n   * Returns the gain node.\n   * @return {GainNode}\n   */\n  _gain() {\n    return this._gainNode;\n  }\n\n  /**\n   * Stops the playing buffer source node and destroys it.\n   * @private\n   */\n  _destroyBufferNode() {\n    if (!this._bufferSourceNode) {\n      return;\n    }\n\n    if (typeof this._bufferSourceNode.stop !== 'undefined') {\n      this._bufferSourceNode.stop();\n    }\n    else {\n      this._bufferSourceNode.noteGrainOff();\n    }\n\n    this._bufferSourceNode.disconnect();\n    this._bufferSourceNode.removeEventListener('ended', this._onEnded);\n    this._bufferSourceNode = null;\n  }\n\n  /**\n   * Sets the sound to play repeatedly or not.\n   * @param {boolean} loop True to play the sound repeatedly.\n   * @private\n   */\n  _setLoop(loop) {\n    if (!this._bufferSourceNode) {\n      return;\n    }\n\n    this._bufferSourceNode.loop = loop;\n\n    if (loop) {\n      this._bufferSourceNode.loopStart = this._startPos;\n      this._bufferSourceNode.loopEnd = this._endPos;\n    }\n  }\n}\n\nexport {Sound as default, SoundState};\n"],"sourceRoot":""}