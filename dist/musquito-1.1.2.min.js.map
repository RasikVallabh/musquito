{"version":3,"sources":["webpack://$buzz/webpack/universalModuleDefinition","webpack://$buzz/webpack/bootstrap","webpack://$buzz/./src/Utility.js","webpack://$buzz/./src/Engine.js","webpack://$buzz/./src/Loader.js","webpack://$buzz/./src/Emitter.js","webpack://$buzz/./src/Queue.js","webpack://$buzz/./src/Buzz.js","webpack://$buzz/./src/Heap.js","webpack://$buzz/./src/Sound.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Utility","_classCallCheck","this","_navigator","_contextType","_formats","navigator","AudioContext","webkitAudioContext","audio","Audio","mp3","Boolean","canPlayType","replace","mpeg","opus","ogg","oga","wav","aac","caf","m4a","mp4","weba","webm","dolby","flac","Math","round","Date","now","random","format","formats","_this","find","isFormatSupported","source","ext","isBase64","exec","toLowerCase","sources","_this2","isSourceSupported","str","test","context","cb","state","userInputEventNames","resumeContext","resume","then","forEach","eventName","document","addEventListener","userAgent","maxTouchPoints","msMaxTouchPoints","ErrorType","NoAudio","LoadError","PlayError","EngineError","EngineState","NotReady","Ready","Suspending","Suspended","Resuming","Destroying","Done","EngineEvents","Add","Remove","Volume","Mute","Pause","Stop","Suspend","Resume","Error","engine","Engine","_id","utility","id","_muted","_volume","_cleanUpInterval","_autoEnable","_intervalId","_isAudioAvailable","_state","_context","_gainNode","_queue","_heap","_loader","Heap","Queue","args","getContext","_fire","type","error","_ref","volume","muted","cleanUpInterval","autoEnable","onadd","onremove","onstop","onpause","onmute","onvolume","onsuspend","onresume","onerror","ondone","on","Loader","enableAudio","createGain","gain","setValueAtTime","currentTime","connect","destination","setInterval","free","urls","load","unload","vol","undefined","sounds","sound","stop","add","suspend","run","_this3","_this4","cleanUp","clearInterval","destroy","dispose","clear","emitter","remove","terminate","close","handler","once","arguments","length","off","idOrUrl","groupId","Sound","_gain","idle","_len","Array","_key","fire","apply","_Emitter2","default","concat","_Utility","DownloadStatus","Success","Failure","DownloadResult","url","status","_bufferCache","_progressCallsAndCallbacks","_disposed","_load","Promise","all","map","isArray","_unload","resolve","push","reject","err","decodeAudioData","arrayBuffer","buffer","data","atob","split","dataView","Uint8Array","charCodeAt","req","XMLHttpRequest","open","responseType","response","send","Emitter","_objectsEventsHandlersMap","_hasObject","objEvents","_hasEvent","filter","eventSubscriber","eventSubscribers","setTimeout","subscriber","_eventActions","actionIdentifier","action","removeAfterRun","hasEvent","fn","keys","_run","hasAction","queued","_Engine","_Loader","BuzzState","Destroyed","BuzzEvents","Load","UnLoad","PlayStart","PlayEnd","Seek","Rate","FadeStart","FadeEnd","FadeStop","Destroy","LoadState","NotLoaded","Loading","Loaded","Buzz","_src","_format","_sprite","_rate","_loop","_preload","_autoplay","_buffer","_duration","_compatibleSrc","_loadState","_engine","_fading","_fadeTimer","setup","_onEngineResume","isAudioAvailable","_typeof","src","sprite","rate","loop","autoplay","preload","onload","onunload","onplaystart","onplayend","onrate","onseek","ondestroy","play","isLoaded","getCompatibleSource","downloadResult","duration","_onLoadFailure","indexOf","getSupportedFormat","getSupportedSource","soundOrId","_play","newSoundId","playSound","soundArgs","playEndCallback","destroyCallback","fadeEndCallback","positions","startPos","endPos","newSound","_removePlayActions","fadeStop","_sounds","pause","isGroup","mute","unmute","to","fade","clearTimeout","seek","isPlaying","_this5","playAndFire","$buzz","method","result","_Engine2","HeapItem","HeapItemCollection","items","soundId","toString","values","item","soundGroupId","isPaused","itemsArray","_collections","col","_toConsumableArray","SoundState","Playing","Paused","_bufferSourceNode","_startPos","_endPos","_currentPos","_rateSeek","_startTime","_playEndCallback","_destroyCallback","_fadeEndCallback","max","createBufferSource","playbackRate","_setLoop","_destroyBufferNode","startTime","start","noteGrainOn","linearRampToValueAtTime","exponentialRampToValueAtTime","cancelScheduledValues","realTime","rateElapsed","disconnect","noteGrainOff","removeEventListener","_onEnded","loopStart","loopEnd"],"mappings":"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","file":"musquito-1.1.2.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"$buzz\"] = factory();\n\telse\n\t\troot[\"$buzz\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","/**\n * Contains helper methods.\n */\nclass Utility {\n\n  /**\n   * The navigator object.\n   * @type {Navigator}\n   * @private\n   */\n  _navigator = null;\n\n  /**\n   * The AudioContext type.\n   * @type {Function}\n   * @private\n   */\n  _contextType = null;\n\n  /**\n   * Dictionary of audio formats and their support status.\n   * @type {object}\n   * @private\n   */\n  _formats = {};\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    if (typeof navigator !== 'undefined') {\n      this._navigator = navigator;\n    }\n\n    // Set the available Web Audio Context type available in browser.\n    if (typeof AudioContext !== 'undefined') {\n      this._contextType = AudioContext;\n    } else if (typeof webkitAudioContext !== 'undefined') {\n      this._contextType = webkitAudioContext;\n    }\n\n    // Determine the supported audio formats.\n    let audio = new Audio();\n\n    this._formats = {\n      mp3: Boolean(audio.canPlayType('audio/mp3;').replace(/^no$/, '')),\n      mpeg: Boolean(audio.canPlayType('audio/mpeg;').replace(/^no$/, '')),\n      opus: Boolean(audio.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, '')),\n      ogg: Boolean(audio.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, '')),\n      oga: Boolean(audio.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, '')),\n      wav: Boolean(audio.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, '')),\n      aac: Boolean(audio.canPlayType('audio/aac;').replace(/^no$/, '')),\n      caf: Boolean(audio.canPlayType('audio/x-caf;').replace(/^no$/, '')),\n      m4a: Boolean((audio.canPlayType('audio/x-m4a;') ||\n        audio.canPlayType('audio/m4a;') ||\n        audio.canPlayType('audio/aac;')).replace(/^no$/, '')),\n      mp4: Boolean((audio.canPlayType('audio/x-mp4;') ||\n        audio.canPlayType('audio/mp4;') ||\n        audio.canPlayType('audio/aac;')).replace(/^no$/, '')),\n      weba: Boolean(audio.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n      webm: Boolean(audio.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n      dolby: Boolean(audio.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, '')),\n      flac: Boolean((audio.canPlayType('audio/x-flac;') || audio.canPlayType('audio/flac;')).replace(/^no$/, ''))\n    };\n\n    audio = null;\n  }\n\n  /**\n   * Returns an unique id (credit: https://howlerjs.com).\n   * @return {number}\n   */\n  id() {\n    return Math.round(Date.now() * Math.random());\n  }\n\n  /**\n   * Returns the available context type.\n   * @return {Function}\n   */\n  getContextType() {\n    return this._contextType;\n  }\n\n  /**\n   * Instantiates and returns the audio context.\n   * @return {AudioContext|webkitAudioContext}\n   */\n  getContext() {\n    return new this._contextType();\n  }\n\n  /**\n   * Returns the supported audio formats.\n   * @return {Object}\n   */\n  supportedFormats() {\n    return this._formats;\n  }\n\n  /**\n   * Returns true if the passed format is supported.\n   * @param {string} format The audio format ex. \"mp3\"\n   * @return {boolean}\n   */\n  isFormatSupported(format) {\n    return Boolean(this._formats[format]);\n  }\n\n  /**\n   * Returns the first supported format from the passed array.\n   * @param {string[]} formats Array of audio formats\n   * @return {string}\n   */\n  getSupportedFormat(formats) {\n    return formats.find(format => this.isFormatSupported(format));\n  }\n\n  /**\n   * Returns true if the audio source is supported.\n   * @param {string} source The audio source url or base64 string\n   * @return {boolean}\n   */\n  isSourceSupported(source) {\n    let ext = this.isBase64(source) ?\n      (/^data:audio\\/([^;,]+);/i).exec(source) :\n      (/^.+\\.([^.]+)$/).exec(source);\n\n    ext = (/^.+\\.([^.]+)$/).exec(source);\n    return ext ? this.isFormatSupported(ext[1].toLowerCase()) : false;\n  }\n\n  /**\n   * Returns the first supported audio source from the passed array.\n   * @param {string[]} sources Array of audio sources. The audio source could be either url or base64 string.\n   * @return {string}\n   */\n  getSupportedSource(sources) {\n    return sources.find(source => this.isSourceSupported(source));\n  }\n\n  /**\n   * Returns whether the passed string is a base64 string or not.\n   * @param {string} str Base64 audio string\n   * @return {boolean}\n   */\n  isBase64(str) {\n    return (/^data:[^;]+;base64,/).test(str);\n  }\n\n  /**\n   * Enables playing audio on first user interaction.\n   * @param {AudioContext} context Web API audio context.\n   * @param {Function} cb The callback.\n   */\n  enableAudio(context, cb) {\n    if (context.state === 'running') {\n      return;\n    }\n\n    // https://developers.google.com/web/updates/2018/11/web-audio-autoplay#moving-forward\n    const userInputEventNames = [\n      'click', 'contextmenu', 'auxclick', 'dblclick', 'mousedown',\n      'mouseup', 'pointerup', 'touchend', 'keydown', 'keyup'\n    ];\n\n    const resumeContext = () => {\n      context.resume().then(cb);\n      userInputEventNames.forEach(eventName => document.addEventListener(eventName, resumeContext));\n    };\n\n    userInputEventNames.forEach(eventName => document.addEventListener(eventName, resumeContext));\n  }\n\n  /**\n   * Returns true if the platform is mobile.\n   * @return {boolean}\n   * @private\n   */\n  _isMobile() {\n    if (!this._navigator) {\n      return false;\n    }\n\n    return (/iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i).test(this._navigator.userAgent);\n  }\n\n  /**\n   * Returns true if the platform is touch supported.\n   * @return {boolean}\n   * @private\n   */\n  _isTouch() {\n    return typeof window !== 'undefined' && (Boolean(('ontouchend' in window) ||\n      (this._navigator && this._navigator.maxTouchPoints > 0) ||\n      (this._navigator && this._navigator.msMaxTouchPoints > 0)));\n  }\n}\n\nexport default new Utility();\n\n","import Loader from './Loader';\nimport emitter from './Emitter';\nimport Heap from './Heap';\nimport Queue from './Queue';\nimport utility from './Utility';\nimport Sound from './Sound';\n\n/**\n * Enum that represents the different type of errors thrown by Engine and Buzzes.\n * @enum {string}\n */\nconst ErrorType = {\n  NoAudio: 'no-audio',\n  LoadError: 'load',\n  PlayError: 'play',\n  EngineError: 'engine'\n};\n\n/**\n * Represents the different states of the audio engine.\n * @enum {string}\n */\nconst EngineState = {\n  NotReady: 'notready',\n  Ready: 'ready',\n  Suspending: 'suspending',\n  Suspended: 'suspended',\n  Resuming: 'resuming',\n  Destroying: 'destroying',\n  Done: 'done',\n  NoAudio: 'no-audio'\n};\n\n/**\n * Enum that represents the different events by engine.\n * @enum {string}\n */\nconst EngineEvents = {\n  Add: 'add',\n  Remove: 'remove',\n  Volume: 'volume',\n  Mute: 'mute',\n  Pause: 'pause',\n  Stop: 'stop',\n  Suspend: 'suspend',\n  Resume: 'resume',\n  Error: 'error',\n  Done: 'done'\n};\n\n/**\n * The audio engine that orchestrates all the sounds.\n * @class\n */\nclass Engine {\n\n  /**\n   * Unique id of the engine.\n   * @type {number}\n   * @private\n   */\n  _id = utility.id();\n\n  /**\n   * Represents whether the audio engine is currently muted or not.\n   * @type {boolean}\n   * @private\n   */\n  _muted = false;\n\n  /**\n   * Represents the global volume.\n   * @type {number}\n   * @private\n   */\n  _volume = 1.0;\n\n  /**\n   * The heap clean-up period.\n   * @type {number}\n   * @private\n   */\n  _cleanUpInterval = 5;\n\n  /**\n   * Auto-enables audio in first user interaction.\n   * @type {boolean}\n   * @private\n   */\n  _autoEnable = true;\n\n  /**\n   * The clean-up interval id.\n   * @type {number|null}\n   * @private\n   */\n  _intervalId = null;\n\n  /**\n   * True if Web Audio API is available.\n   * @type {boolean}\n   * @private\n   */\n  _isAudioAvailable = false;\n\n  /**\n   * Represents the current state of the engine.\n   * @type {EngineState}\n   * @private\n   */\n  _state = EngineState.NotReady;\n\n  /**\n   * The Web Audio API's audio context.\n   * @type {AudioContext}\n   * @private\n   */\n  _context = null;\n\n  /**\n   * The master gain node.\n   * @type {GainNode}\n   * @private\n   */\n  _gainNode = null;\n\n  /**\n   * The action queue.\n   * @type {Queue}\n   * @private\n   */\n  _queue = null;\n\n  /**\n   * The sound heap.\n   * @type {Heap}\n   * @private\n   */\n  _heap = null;\n\n  /**\n   * Loader - the component that loads audio buffers with audio data.\n   * @type {Loader}\n   * @private\n   */\n  _loader = null;\n\n  /**\n   * Instantiates the heap and action queue.\n   * @constructor\n   */\n  constructor() {\n    this._heap = new Heap();\n    this._queue = new Queue();\n  }\n\n  /**\n   * Instantiate the audio context and other dependencies.\n   * @param {object} [args] Input parameters object.\n   * @param {number} [args.volume = 1.0] The global volume of the sound engine.\n   * @param {boolean} [args.muted = false] Stay muted initially or not.\n   * @param {number} [args.cleanUpInterval = 5] The heap clean-up interval period in minutes.\n   * @param {boolean} [args.autoEnable = true] Auto-enables audio in first user interaction.\n   * @param {function} [args.onadd] Event-handler for the \"add\" event.\n   * @param {function} [args.onremove] Event-handler for the \"remove\" event.\n   * @param {function} [args.onstop] Event-handler for the \"stop\" event.\n   * @param {function} [args.onpause] Event-handler for the \"pause\" event.\n   * @param {function} [args.onmute] Event-handler for the \"mute\" event.\n   * @param {function} [args.onvolume] Event-handler for the \"volume\" event.\n   * @param {function} [args.onsuspend] Event-handler for the \"suspend\" event.\n   * @param {function} [args.onresume] Event-handler for the \"resume\" event.\n   * @param {function} [args.onerror] Event-handler for the \"error\" event.\n   * @param {function} [args.ondone] Event-handler for the \"done\" event.\n   * @return {Engine}\n   */\n  setup(args) {\n    // If the setup is already done return.\n    if (this._state !== EngineState.NotReady) {\n      return this;\n    }\n\n    this._context = utility.getContext();\n\n    // Determine the audio stuff available in the current platform and set the flags accordingly.\n    this._isAudioAvailable = Boolean(this._context);\n\n    // If no Web Audio and HTML5 audio is available fire an error event.\n    if (!this._isAudioAvailable) {\n      this._state = EngineState.NoAudio;\n      this._fire(EngineEvents.Error, { type: ErrorType.NoAudio, error: 'Web Audio API is not available' });\n      return this;\n    }\n\n    // Read the input parameters from the options.\n    const {\n      volume,\n      muted,\n      cleanUpInterval,\n      autoEnable,\n      onadd,\n      onremove,\n      onstop,\n      onpause,\n      onmute,\n      onvolume,\n      onsuspend,\n      onresume,\n      onerror,\n      ondone\n    } = args || {};\n\n    // Set the properties from the read parameters.\n    typeof volume === 'number' && volume >= 0 && volume <= 1.0 && (this._volume = volume);\n    typeof muted === 'boolean' && (this._muted = muted);\n    typeof cleanUpInterval === 'number' && (this._cleanUpInterval = cleanUpInterval);\n    typeof autoEnable === 'boolean' && (this._autoEnable = autoEnable);\n    typeof onadd === 'function' && this.on(EngineEvents.Add, onadd);\n    typeof onremove === 'function' && this.on(EngineEvents.Remove, onremove);\n    typeof onstop === 'function' && this.on(EngineEvents.Stop, onstop);\n    typeof onpause === 'function' && this.on(EngineEvents.Pause, onpause);\n    typeof onmute === 'function' && this.on(EngineEvents.Mute, onmute);\n    typeof onvolume === 'function' && this.on(EngineEvents.Volume, onvolume);\n    typeof onsuspend === 'function' && this.on(EngineEvents.Suspend, onsuspend);\n    typeof onresume === 'function' && this.on(EngineEvents.Resume, onresume);\n    typeof onerror === 'function' && this.on(EngineEvents.Error, onerror);\n    typeof ondone === 'function' && this.on(EngineEvents.Done, ondone);\n\n    // Create the buffer loader.\n    this._loader = new Loader(this._context);\n\n    // Auto-enable audio in first user interaction.\n    this._autoEnable && utility.enableAudio(this._context, () => (this._state = EngineState.Ready));\n\n    // Create the audio graph.\n    this._gainNode = this._context.createGain();\n    this._gainNode.gain.setValueAtTime(this._muted ? 0 : this._volume, this._context.currentTime);\n    this._gainNode.connect(this._context.destination);\n\n    this._intervalId = window.setInterval(this._heap.free, this._cleanUpInterval * 60 * 1000);\n\n    this._state = this._context.state !== 'suspended' ? EngineState.Ready : EngineState.Suspended;\n\n    return this;\n  }\n\n  /**\n   * Loads single or multiple audio resources into audio buffers and returns them.\n   * @param {string|string[]} urls Single or array of audio urls.\n   * @return {Promise}\n   */\n  load(urls) {\n    return this._loader.load(urls);\n  }\n\n  /**\n   * Unloads single or multiple loaded audio buffers from cache.\n   * @param {string|string[]} [urls] Single or array of audio urls.\n   * @return {Engine}\n   */\n  unload(urls) {\n    this._loader.unload(urls);\n    return this;\n  }\n\n  /**\n   * Mutes the engine.\n   * @return {Engine}\n   */\n  mute() {\n    // If the engine is already muted return.\n    if (this._muted) {\n      return this;\n    }\n\n    // Set the value of gain node to 0.\n    this._gainNode.gain.setValueAtTime(0, this._context.currentTime);\n\n    // Set the muted property true.\n    this._muted = true;\n\n    // Fire the \"mute\" event.\n    this._fire(EngineEvents.Mute, this._muted);\n\n    return this;\n  }\n\n  /**\n   * Un-mutes the engine.\n   * @return {Engine}\n   */\n  unmute() {\n    // If the engine is not muted return.\n    if (!this._muted) {\n      return this;\n    }\n\n    // Reset the gain node's value back to volume.\n    this._gainNode.gain.setValueAtTime(this._volume, this._context.currentTime);\n\n    // Set the muted property to false.\n    this._muted = false;\n\n    // Fire the \"mute\" event.\n    this._fire(EngineEvents.Mute, this._muted);\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the volume for the audio engine that controls global volume for all sounds.\n   * @param {number} [vol] Should be within 0.0 to 1.0.\n   * @return {Engine|number}\n   */\n  volume(vol) {\n    // If no parameter is passed then return the current volume.\n    if (vol === undefined) {\n      return this._volume;\n    }\n\n    // If passed volume is not an acceptable value return.\n    if (typeof vol !== 'number' || vol < 0 || vol > 1.0) {\n      return this;\n    }\n\n    // Set the gain's value to the passed volume.\n    this._gainNode.gain.setValueAtTime(this._muted ? 0 : vol, this._context.currentTime);\n\n    // Set the volume to the property.\n    this._volume = vol;\n\n    // Fire the \"volume\" event.\n    this._fire(EngineEvents.Volume, this._volume);\n\n    return this;\n  }\n\n  /**\n   * Stops all the currently playing sounds.\n   * @return {Engine}\n   */\n  stop() {\n    // Stop all the sounds.\n    this._heap.sounds().forEach(sound => sound.stop());\n\n    // Fire the \"stop\" event.\n    this._fire(EngineEvents.Stop);\n\n    return this;\n  }\n\n  /**\n   * Stops all the playing sounds and suspends the audio context immediately.\n   * @return {Engine}\n   */\n  suspend() {\n    // If the context is resuming then suspend after resumed.\n    if (this._state === EngineState.Resuming) {\n      this._queue.add('after-resume', 'suspend', () => this.suspend());\n      return this;\n    }\n\n    // If the state is not ready return.\n    if (this._state !== EngineState.Ready) {\n      return this;\n    }\n\n    // Stop all the playing sounds.\n    this.stop();\n\n    // Set the state to suspending.\n    this._state = EngineState.Suspending;\n\n    // Suspend the Audio Context.\n    this._context.suspend().then(() => {\n      this._state = EngineState.Suspended;\n      this._queue.run('after-suspend');\n      this._fire(EngineEvents.Suspend);\n    });\n\n    return this;\n  }\n\n  /**\n   * Resumes the audio context from the suspended mode.\n   * @return {Engine}\n   */\n  resume() {\n    // If the context is suspending then resume after suspended.\n    if (this._state === EngineState.Suspending) {\n      this._queue.add('after-suspend', 'resume', () => this.resume());\n      return this;\n    }\n\n    if (this._state !== EngineState.Suspended) {\n      return this;\n    }\n\n    this._state = EngineState.Resuming;\n\n    this._context.resume().then(() => {\n      this._state = EngineState.Ready;\n      this._queue.run('after-resume');\n      this._fire(EngineEvents.Resume);\n    });\n\n    return this;\n  }\n\n  /**\n   * Shuts down the engine.\n   * @return {Engine}\n   */\n  terminate() {\n    if (this._state === EngineState.Done || this._state === EngineState.Destroying) {\n      return this;\n    }\n\n    const cleanUp = () => {\n      // Stop the timer.\n      this._intervalId && window.clearInterval(this._intervalId);\n      this._intervalId = null;\n\n      // Destroy the heap.\n      this._heap.destroy();\n      this._heap = null;\n\n      // Clear the cache and remove the loader.\n      if (this._loader) {\n        this._loader.dispose();\n        this._loader = null;\n      }\n\n      this._context = null;\n      this._queue.clear();\n      this._queue = null;\n      this._state = EngineState.Done;\n\n      // Fire the \"done\" event.\n      this._fire(EngineEvents.Done);\n\n      emitter.clear(this._id);\n    };\n\n    // Close the context.\n    if (this._context) {\n      if (this._state === EngineState.Suspending) {\n        this._queue.remove('after-suspend');\n        this._queue.add('after-suspend', 'destroy', () => this.terminate());\n        return this;\n      } else if (this._state === EngineState.Resuming) {\n        this._queue.remove('after-resume');\n        this._queue.add('after-resume', 'destroy', () => this.terminate());\n        return this;\n      }\n\n      this._state = EngineState.Destroying;\n      this._context && this._context.close().then(() => cleanUp());\n    } else {\n      this._state = EngineState.Destroying;\n      cleanUp();\n    }\n\n    return this;\n  }\n\n  /**\n   * Subscribes to an event.\n   * @param {string} eventName Name of the event.\n   * @param {function} handler The event-handler function.\n   * @param {boolean} [once = false] Is it one-time subscription or not.\n   * @return {Engine}\n   */\n  on(eventName, handler, once = false) {\n    emitter.on(this._id, eventName, handler, once);\n    return this;\n  }\n\n  /**\n   * Un-subscribes from an event.\n   * @param {string} eventName The event name.\n   * @param {function} [handler] The handler function.\n   * @return {Engine}\n   */\n  off(eventName, handler) {\n    emitter.off(this._id, eventName, handler);\n    return this;\n  }\n\n  /**\n   * Returns the existing sound in heap or create a new one and return.\n   * @param {number|string} idOrUrl The sound id or audio url/base64 string.\n   * @param {number} [groupId] The group id.\n   * @param {object} [args] The sound creation arguments.\n   * @return {Sound}\n   */\n  sound(idOrUrl, groupId, args) {\n    if (typeof idOrUrl === 'number') {\n      return this._heap.sound(idOrUrl);\n    }\n\n    const sound = new Sound(args);\n    this._heap.add(idOrUrl, groupId, sound);\n    sound._gain().connect(this._gainNode);\n\n    return sound;\n  }\n\n  /**\n   * Returns the sounds belongs to a group or all the sounds from the heap.\n   * @param {number} [groupId] The group id.\n   * @return {Array<Sound>}\n   */\n  sounds(groupId) {\n    return this._heap.sounds(groupId);\n  }\n\n  /**\n   * Destroys the sounds belong to the passed group.\n   * @param {boolean} idle True to destroy only the idle sounds.\n   * @param {number} groupId The group id.\n   * @return {Engine}\n   */\n  free(idle, groupId) {\n    this._heap.free(idle, groupId);\n    return this;\n  }\n\n  /**\n   * Returns whether the engine is currently muted or not.\n   * @return {boolean}\n   */\n  muted() {\n    return this._muted;\n  }\n\n  /**\n   * Returns the state of the engine.\n   * @return {EngineState}\n   */\n  state() {\n    return this._state;\n  }\n\n  /**\n   * Returns the created audio context.\n   * @return {AudioContext}\n   */\n  context() {\n    return this._context;\n  }\n\n  /**\n   * Returns true if Web Audio API is available.\n   * @return {boolean}\n   */\n  isAudioAvailable() {\n    return this._isAudioAvailable;\n  }\n\n  /**\n   * Fires an event of engine.\n   * @param {string} eventName The event name.\n   * @param {...*} args The arguments that to be passed to handler.\n   * @return {Engine}\n   * @private\n   */\n  _fire(eventName, ...args) {\n    emitter.fire(this._id, eventName, ...args, this);\n    return this;\n  }\n}\n\nconst engine = new Engine();\nexport { engine as default, EngineState, EngineEvents, ErrorType };\n","import utility from './Utility';\n\n/**\n * Enum to represent the download status of audio resource.\n * @enum {string}\n */\nconst DownloadStatus = {\n  Success: 'success',\n  Failure: 'error'\n};\n\n/**\n * Represents the download result of an audio.\n * @class\n */\nclass DownloadResult {\n\n  /**\n   * The url of the audio resource\n   * @type {string|null}\n   */\n  url = null;\n\n  /**\n   * AudioBuffer or Html5Audio element\n   * @type {AudioBuffer|Audio}\n   */\n  value = null;\n\n  /**\n   * Download error\n   * @type {any}\n   */\n  error = null;\n\n  /**\n   * Success or failure status of download.\n   * @type {DownloadStatus}\n   */\n  status = null;\n\n  /**\n   * @param {string|null} url The url of the audio resource\n   * @param {AudioBuffer|Audio} [value] AudioBuffer or Html5Audio element\n   * @param {*} [error] Download error\n   */\n  constructor(url, value, error) {\n    this.url = url;\n    this.value = value;\n    this.error = error || null;\n    this.status = error ? DownloadStatus.Failure : DownloadStatus.Success;\n  }\n}\n\n/**\n * Loads the audio sources into audio buffers and returns them.\n * The loaded buffers are cached.\n * @class\n */\nclass Loader {\n\n  /**\n   * AudioContext.\n   * @type {AudioContext}\n   * @private\n   */\n  _context = null;\n\n  /**\n   * In-memory audio buffer cache store.\n   * @type {object}\n   * @private\n   */\n  _bufferCache = {};\n\n  /**\n   * Dictionary to store the current progress calls and their callbacks.\n   * @type {object}\n   * @private\n   */\n  _progressCallsAndCallbacks = {};\n\n  /**\n   * True if the loader is disposed.\n   * @type {boolean}\n   * @private\n   */\n  _disposed = false;\n\n  /**\n   * Create the cache.\n   * @param {AudioContext} context The Audio Context\n   */\n  constructor(context) {\n    this._context = context;\n  }\n\n  /**\n   * Loads single or multiple audio resources into audio buffers.\n   * @param {string|string[]} urls Single or array of audio urls\n   * @return {Promise<DownloadResult|Array<DownloadResult>>}\n   */\n  load(urls) {\n    if (typeof urls === 'string') {\n      return this._load(urls);\n    }\n\n    return Promise.all(urls.map(url => this._load(url)));\n  }\n\n  /**\n   * Removes the cached audio buffers.\n   * @param {string|string[]} [urls] Single or array of audio urls\n   */\n  unload(urls) {\n    if (typeof urls === 'string') {\n      this._unload(urls);\n      return;\n    }\n\n    if (Array.isArray(urls)) {\n      urls.forEach(url => this._unload(url), this);\n      return;\n    }\n\n    this._bufferCache = {};\n  }\n\n  /**\n   * Dispose the loader.\n   */\n  dispose() {\n    if (this._disposed) {\n      return;\n    }\n\n    this.unload();\n    this._bufferCache = {};\n    this._progressCallsAndCallbacks = null;\n    this._context = null;\n    this._disposed = true;\n  }\n\n  /**\n   * Loads a single audio resource into audio buffer and cache result if the download is succeeded.\n   * @param {string} url The Audio url\n   * @return {Promise<DownloadResult>}\n   * @private\n   */\n  _load(url) {\n    return new Promise(resolve => {\n      if (this._bufferCache.hasOwnProperty(url)) {\n        resolve(new DownloadResult(url, this._bufferCache[url]));\n        return;\n      }\n\n      if (this._progressCallsAndCallbacks.hasOwnProperty(url)) {\n        this._progressCallsAndCallbacks[url].push(resolve);\n        return;\n      }\n\n      this._progressCallsAndCallbacks[url] = [];\n      this._progressCallsAndCallbacks[url].push(resolve);\n\n      const reject = err => {\n        if (this._disposed) {\n          return;\n        }\n\n        this._progressCallsAndCallbacks[url].forEach(r => r(new DownloadResult(url, null, err)));\n        delete this._progressCallsAndCallbacks[url];\n      };\n\n      const decodeAudioData = arrayBuffer => {\n        if (this._disposed) {\n          return;\n        }\n\n        this._context.decodeAudioData(arrayBuffer, buffer => {\n          this._bufferCache[url] = buffer;\n          this._progressCallsAndCallbacks[url].forEach(r => r(new DownloadResult(url, buffer)));\n          delete this._progressCallsAndCallbacks[url];\n        }, reject);\n      };\n\n      if (utility.isBase64(url)) {\n        const data = atob(url.split(',')[1]);\n        const dataView = new Uint8Array(data.length); // eslint-disable-line no-undef\n\n        for (let i = 0; i < data.length; ++i) {\n          dataView[i] = data.charCodeAt(i);\n        }\n\n        decodeAudioData(dataView);\n        return;\n      }\n\n      const req = new XMLHttpRequest();\n      req.open('GET', url, true);\n      req.responseType = 'arraybuffer';\n\n      req.addEventListener('load', () => decodeAudioData(req.response), false);\n      req.addEventListener('error', reject, false);\n      req.send();\n    });\n  }\n\n  /**\n   * Removes the single cached audio buffer.\n   * @param {string} url Audio url\n   * @private\n   */\n  _unload(url) {\n    delete this._bufferCache[url];\n  }\n}\n\nexport { Loader as default, DownloadResult, DownloadStatus };\n","/**\n * Singleton global event emitter.\n * @class\n */\nclass Emitter {\n\n  /**\n   * Dictionary that maps the objects with their events and handlers.\n   * @type {object}\n   * @private\n   */\n  _objectsEventsHandlersMap = {};\n\n  /**\n   * Subscribes to an event of the passed object.\n   * @param {number} id The unique id of the object.\n   * @param {string} eventName Name of the event\n   * @param {function} handler The event-handler function\n   * @param {boolean} [once = false] Is it one-time subscription or not?\n   * @return {Emitter}\n   */\n  on(id, eventName, handler, once = false) {\n    if (!this._hasObject(id)) {\n      this._objectsEventsHandlersMap[id] = {};\n    }\n\n    const objEvents = this._objectsEventsHandlersMap[id];\n\n    if (!objEvents.hasOwnProperty(eventName)) {\n      objEvents[eventName] = [];\n    }\n\n    objEvents[eventName].push({\n      handler: handler,\n      once: once\n    });\n\n    return this;\n  }\n\n  /**\n   * Un-subscribes from an event of the passed object.\n   * @param {number} id The unique id of the object.\n   * @param {string} eventName The event name.\n   * @param {function} [handler] The handler function.\n   * @return {Emitter}\n   */\n  off(id, eventName, handler) {\n    if (!this._hasEvent(id, eventName)) {\n      return this;\n    }\n\n    const objEvents = this._objectsEventsHandlersMap[id];\n\n    if (!handler) {\n      objEvents[eventName] = [];\n    } else {\n      objEvents[eventName] = objEvents[eventName].filter(eventSubscriber => {\n        return eventSubscriber.handler !== handler;\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Fires an event of the object passing the source and other optional arguments.\n   * @param {number} id The unique id of the object.\n   * @param {string} eventName The event name\n   * @param {...*} args The arguments that to be passed to handler\n   * @return {Emitter}\n   */\n  fire(id, eventName, ...args) {\n    if (!this._hasEvent(id, eventName)) {\n      return this;\n    }\n\n    let eventSubscribers = this._objectsEventsHandlersMap[id][eventName];\n\n    for (let i = 0; i < eventSubscribers.length; i++) {\n      let eventSubscriber = eventSubscribers[i];\n\n      setTimeout(function (subscriber) {\n        const { handler, once } = subscriber;\n\n        handler(...args);\n\n        if (once) {\n          this.off(id, eventName, handler);\n        }\n      }.bind(this, eventSubscriber), 0);\n    }\n\n    return this;\n  }\n\n  /**\n   * Clears the event handlers of the passed object.\n   * @param {number} [id] The unique id of the object.\n   * @return {Emitter}\n   */\n  clear(id) {\n    if (!id) {\n      this._objectsEventsHandlersMap = {};\n      return this;\n    }\n\n    if (this._hasObject(id)) {\n      delete this._objectsEventsHandlersMap[id];\n    }\n\n    return this;\n  }\n\n  /**\n   * Returns true if the object is already registered.\n   * @param {number} id The object id.\n   * @return {boolean}\n   * @private\n   */\n  _hasObject(id) {\n    return this._objectsEventsHandlersMap.hasOwnProperty(id);\n  }\n\n  /**\n   * Returns true if the passed object has an entry of the passed event.\n   * @param {number} id The object id.\n   * @param {string} eventName The event name.\n   * @return {boolean}\n   * @private\n   */\n  _hasEvent(id, eventName) {\n    return this._hasObject(id) && this._objectsEventsHandlersMap[id].hasOwnProperty(eventName);\n  }\n}\n\nexport default new Emitter();\n","/**\n * Stores queue of actions that has to be run before or after specific events.\n */\nclass Queue {\n\n  _eventActions = {};\n\n  /**\n   * Queues the passed action to the event.\n   * @param {string} eventName The event name.\n   * @param {string} actionIdentifier The action identifier.\n   * @param {function} action The action function.\n   * @param {boolean} [removeAfterRun = true] Remove the action once it's run.\n   */\n  add(eventName, actionIdentifier, action, removeAfterRun = true) {\n    if (!this.hasEvent(eventName)) {\n      this._eventActions[eventName] = {};\n    }\n\n    this._eventActions[eventName][actionIdentifier] = { fn: action, removeAfterRun: removeAfterRun };\n  }\n\n  /**\n   * Returns true if there is a event exists for the passed name.\n   * @param {string} eventName The event name.\n   * @return {boolean}\n   */\n  hasEvent(eventName) {\n    return this._eventActions.hasOwnProperty(eventName);\n  }\n\n  /**\n   * Returns true if the passed action is already queued-up.\n   * @param {string} eventName The event name.\n   * @param {string} actionIdentifier The action identifier.\n   * @return {boolean}\n   */\n  hasAction(eventName, actionIdentifier) {\n    if (!this.hasEvent(eventName)) {\n      return false;\n    }\n\n    return this._eventActions[eventName].hasOwnProperty(actionIdentifier);\n  }\n\n  /**\n   * Runs all the actions queued up for the passed event.\n   * @param {string} eventName The event name.\n   * @param {string} [actionIdentifier] The action identifier.\n   */\n  run(eventName, actionIdentifier) {\n    if (!this.hasEvent(eventName)) {\n      return;\n    }\n\n    if (typeof actionIdentifier !== 'undefined') {\n      if (!this.hasAction(eventName, actionIdentifier)) {\n        return;\n      }\n\n      this._run(eventName, actionIdentifier);\n\n      return;\n    }\n\n    Object.keys(this._eventActions[eventName]).forEach(action => this._run(eventName, action));\n  }\n\n  /**\n   * Removes the event or a queued action for the event.\n   * @param {string} eventName The event name.\n   * @param {string} [actionIdentifier] The action identifier.\n   */\n  remove(eventName, actionIdentifier) {\n    if (!this._eventActions.hasOwnProperty(eventName)) {\n      return;\n    }\n\n    if (!actionIdentifier) {\n      delete this._eventActions[eventName];\n      return;\n    }\n\n    delete this._eventActions[eventName][actionIdentifier];\n  }\n\n  /**\n   * Clears all the stored events and the queued-up actions.\n   */\n  clear() {\n    this._eventActions = {};\n  }\n\n  /**\n   * Runs a single action.\n   * @param {string} eventName The event name.\n   * @param {string} actionIdentifier The action identifier.\n   * @private\n   */\n  _run(eventName, actionIdentifier) {\n    const queued = this._eventActions[eventName][actionIdentifier];\n    queued.fn();\n    queued.removeAfterRun && this.remove(eventName, actionIdentifier);\n  }\n}\n\nexport default Queue;\n","import engine, { EngineEvents, EngineState, ErrorType } from './Engine';\nimport Queue                                            from './Queue';\nimport utility                                          from './Utility';\nimport emitter                                          from './Emitter';\nimport { DownloadStatus }                               from './Loader';\n\n/**\n * Enum that represents the different states of a sound group (buzz).\n * @enum {string}\n */\nconst BuzzState = {\n  Ready: 'ready',\n  Destroyed: 'destroyed'\n};\n\n/**\n * Enum that represents the different events fired by a buzz.\n * @enum {string}\n */\nconst BuzzEvents = {\n  Load: 'load',\n  UnLoad: 'unload',\n  PlayStart: 'playstart',\n  PlayEnd: 'playend',\n  Pause: 'pause',\n  Stop: 'stop',\n  Volume: 'volume',\n  Mute: 'mute',\n  Seek: 'seek',\n  Rate: 'rate',\n  FadeStart: 'fadestart',\n  FadeEnd: 'fadeend',\n  FadeStop: 'fadestop',\n  Error: 'error',\n  Destroy: 'destroy'\n};\n\n/**\n * Enum that represents the different states occurs while loading a sound.\n * @enum {string}\n */\nconst LoadState = {\n  NotLoaded: 'notloaded',\n  Loading: 'loading',\n  Loaded: 'loaded'\n};\n\n/**\n * A wrapper class that simplifies dealing with group of sounds.\n */\nclass Buzz {\n\n  /**\n   * Unique id.\n   * @type {number}\n   * @private\n   */\n  _id = -1;\n\n  /**\n   * Represents the source of the sound. The source can be an url or base64 string.\n   * @type {*}\n   * @private\n   */\n  _src = null;\n\n  /**\n   * The formats of the passed audio sources.\n   * @type {Array<string>}\n   * @private\n   */\n  _format = [];\n\n  /**\n   * The sprite definition.\n   * @type {object}\n   * @private\n   */\n  _sprite = null;\n\n  /**\n   * The current volume of the sound. Should be from 0.0 to 1.0.\n   * @type {number}\n   * @private\n   */\n  _volume = 1.0;\n\n  /**\n   * The current rate of the playback. Should be from 0.5 to 5.\n   * @type {number}\n   * @private\n   */\n  _rate = 1;\n\n  /**\n   * True if the sound is currently muted.\n   * @type {boolean}\n   * @private\n   */\n  _muted = false;\n\n  /**\n   * True if the sound should play repeatedly.\n   * @type {boolean}\n   * @private\n   */\n  _loop = false;\n\n  /**\n   * True to pre-loaded the sound on construction.\n   * @type {boolean}\n   * @private\n   */\n  _preload = false;\n\n  /**\n   * True to auto-play the sound on construction.\n   * @type {boolean}\n   * @private\n   */\n  _autoplay = false;\n\n  /**\n   * The audio buffer.\n   * @type {AudioBuffer}\n   * @private\n   */\n  _buffer = null;\n\n  /**\n   * Duration of the playback in seconds.\n   * @type {number}\n   * @private\n   */\n  _duration = 0;\n\n  /**\n   * The best compatible source in the audio sources passed.\n   * @type {string|null}\n   * @private\n   */\n  _compatibleSrc = null;\n\n  /**\n   * Represents the different states that occurs while loading the sound.\n   * @type {LoadState}\n   * @private\n   */\n  _loadState = LoadState.NotLoaded;\n\n  /**\n   * Represents the state of this group.\n   * @type {BuzzState}\n   * @private\n   */\n  _state = BuzzState.Ready;\n\n  /**\n   * The action queue.\n   * @type {Queue}\n   * @private\n   */\n  _queue = null;\n\n  /**\n   * The audio engine.\n   * @type {Engine}\n   * @private\n   */\n  _engine = null;\n\n  /**\n   * True if the group is currently fading.\n   * @type {boolean}\n   * @private\n   */\n  _fading = false;\n\n  /**\n   * The timer that runs function after the fading is complete.\n   * @type {number|null}\n   * @private\n   */\n  _fadeTimer = null;\n\n  /**\n   * Initializes the internal properties.\n   * @param {string|Array<string>|object} args The input parameters of this sound group.\n   * @param {string} [args.id] The unique id of the sound.\n   * @param {string|string[]} args.src Single or array of audio urls/base64 strings.\n   * @param {number} [args.volume = 1.0] The initial volume of the sound. Should be from 0.0 to 1.0.\n   * @param {number} [args.rate = 1] The initial playback rate of the sound. Should be from 0.5 to 5.0.\n   * @param {boolean} [args.loop = false] True to play the sound repeatedly.\n   * @param {boolean} [args.muted = false] True to be muted initially.\n   * @param {boolean} [args.preload = false] True to pre-load the sound after construction.\n   * @param {boolean} [args.autoplay = false] True to play automatically after construction.\n   * @param {string|string[]} [args.format] The file format(s) of the passed audio source(s).\n   * @param {object} [args.sprite] The sprite definition.\n   * @param {function} [args.onload] Event-handler for the \"load\" event.\n   * @param {function} [args.onunload] Event-handler for the \"unload\" event.\n   * @param {function} [args.onplaystart] Event-handler for the \"playstart\" event.\n   * @param {function} [args.onplayend] Event-handler for the \"playend\" event.\n   * @param {function} [args.onstop] Event-handler for the \"stop\" event.\n   * @param {function} [args.onpause] Event-handler for the \"pause\" event.\n   * @param {function} [args.onmute] Event-handler for the \"mute\" event.\n   * @param {function} [args.onvolume] Event-handler for the \"volume\" event.\n   * @param {function} [args.onrate] Event-handler for the \"rate\" event.\n   * @param {function} [args.onseek] Event-handler for the \"seek\" event.\n   * @param {function} [args.onerror] Event-handler for the \"error\" event.\n   * @param {function} [args.ondestroy] Event-handler for the \"destroy\" event.\n   * @constructor\n   */\n  constructor(args) {\n    // Setup the audio engine.\n    this._engine = engine;\n    this._engine.setup();\n    this._engine.on(EngineEvents.Resume, this._onEngineResume = this._onEngineResume.bind(this));\n\n    // If no audio is available throw error.\n    if (!this._engine.isAudioAvailable()) {\n      this._fire(BuzzEvents.Error, null, { type: ErrorType.NoAudio, error: 'Web Audio is un-available' });\n      return this;\n    }\n\n    if (typeof args === 'string') {\n      this._src = [args];\n    } else if (Array.isArray(args) && args.length) {\n      this._src = args;\n    } else if (typeof args === 'object') {\n      const {\n        id,\n        src,\n        format,\n        sprite,\n        volume,\n        rate,\n        muted,\n        loop,\n        autoplay,\n        preload,\n        onload,\n        onunload,\n        onplaystart,\n        onplayend,\n        onstop,\n        onpause,\n        onmute,\n        onvolume,\n        onrate,\n        onseek,\n        onerror,\n        ondestroy\n      } = args;\n\n      // Set the passed id or the random one.\n      this._id = typeof id === 'number' ? id : utility.id();\n\n      // Set the source.\n      if (typeof src === 'string') {\n        this._src = [src];\n      } else if (Array.isArray(src) && src.length) {\n        this._src = src;\n      }\n\n      // Set the format.\n      if (Array.isArray(format)) {\n        this._format = format;\n      } else if (typeof format === 'string' && format) {\n        this._format = [format];\n      }\n\n      // Set other properties.\n      typeof sprite === 'object' && (this._sprite = sprite);\n      typeof volume === 'number' && volume >= 0 && volume <= 1.0 && (this._volume = volume);\n      typeof rate === 'number' && rate >= 0.5 && rate <= 5 && (this._rate = rate);\n      typeof muted === 'boolean' && (this._muted = muted);\n      typeof loop === 'boolean' && (this._loop = loop);\n      typeof autoplay === 'boolean' && (this._autoplay = autoplay);\n      typeof preload === 'boolean' && (this._preload = preload);\n      typeof onload === 'function' && this.on(BuzzEvents.Load, onload);\n      typeof onunload === 'function' && this.on(BuzzEvents.UnLoad, onunload);\n\n      // Bind the passed event handlers to events.\n      typeof onplaystart === 'function' && this.on(BuzzEvents.PlayStart, onplaystart);\n      typeof onplayend === 'function' && this.on(BuzzEvents.PlayEnd, onplayend);\n      typeof onstop === 'function' && this.on(BuzzEvents.Stop, onstop);\n      typeof onpause === 'function' && this.on(BuzzEvents.Pause, onpause);\n      typeof onmute === 'function' && this.on(BuzzEvents.Mute, onmute);\n      typeof onvolume === 'function' && this.on(BuzzEvents.Volume, onvolume);\n      typeof onrate === 'function' && this.on(BuzzEvents.Rate, onrate);\n      typeof onseek === 'function' && this.on(BuzzEvents.Seek, onseek);\n      typeof onerror === 'function' && this.on(BuzzEvents.Error, onerror);\n      typeof ondestroy === 'function' && this.on(BuzzEvents.Destroy, ondestroy);\n    }\n\n    // Throw error if source is not passed.\n    if (!this._src) {\n      throw new Error('You should pass the source for the audio.');\n    }\n\n    // Instantiate the dependencies.\n    this._queue = new Queue();\n\n    if (this._autoplay) {\n      this.play();\n    } else if (this._preload) {\n      this.load();\n    }\n  }\n\n  /**\n   * Loads the sound to the underlying audio object.\n   * @return {Buzz}\n   */\n  load() {\n    // If the sound is already loaded return without reloading again.\n    if (this.isLoaded() || this._loadState === LoadState.Loading) {\n      return this;\n    }\n\n    // Set the state to \"Loading\" to avoid loading multiple times.\n    this._loadState = LoadState.Loading;\n\n    // Get the compatible source.\n    const src = this._compatibleSrc || (this._compatibleSrc = this.getCompatibleSource());\n\n    // If no compatible source found call failure method and return.\n    if (!src) {\n      this._onLoadFailure('The audio formats you passed are not supported');\n      return this;\n    }\n\n    // Load the audio source.\n    this._engine.load(src).then(downloadResult => {\n      // During the time of loading... if the buzz is unloaded or destroyed then return.\n      if (this._loadState === LoadState.NotLoaded || this._state === BuzzState.Destroyed) {\n        return;\n      }\n\n      // If loading succeeded,\n      // i. Save the result.\n      // ii. Set the load state as loaded.\n      // iii. Fire the load event.\n      // iv. Run the methods that are queued to run after successful load.\n      if (downloadResult.status === DownloadStatus.Success) {\n        this._buffer = downloadResult.value;\n        this._duration = this._buffer.duration;\n        this._loadState = LoadState.Loaded;\n        this._fire(BuzzEvents.Load, null, downloadResult);\n        this._queue.run('after-load');\n        return;\n      }\n\n      this._onLoadFailure(downloadResult.error);\n    });\n\n    return this;\n  }\n\n  /**\n   * Called on failure of loading audio source.\n   * @param {*} error The audio source load error.\n   * @private\n   */\n  _onLoadFailure(error) {\n    // Remove the queued actions from this class that are supposed to run after load.\n    this._queue.remove('after-load');\n\n    // Set the load state back to not loaded.\n    this._loadState = LoadState.NotLoaded;\n\n    // Fire the error event.\n    this._fire(BuzzEvents.Error, null, { type: ErrorType.LoadError, error: error });\n  }\n\n  /**\n   * Returns the first compatible source based on the passed sources and the format.\n   * @return {string}\n   */\n  getCompatibleSource() {\n    // If the user has passed \"format\", check if it is supported or else retrieve the first supported source from the array.\n    return this._format.length ?\n      this._src[this._format.indexOf(utility.getSupportedFormat(this._format))] :\n      utility.getSupportedSource(this._src);\n  }\n\n  /**\n   * Plays the passed sound defined in the sprite or the sound that belongs to the passed id.\n   * @param {string|number} [soundOrId] The sound name defined in sprite or the sound id.\n   * @return {Buzz|number}\n   */\n  play(soundOrId) {\n    const isIdPassed = typeof soundOrId === 'number';\n\n    // If id is passed then get the sound from the engine and play it.\n    if (isIdPassed) {\n      const sound = this._engine.sound(soundOrId);\n      sound && this._play(sound);\n      return this;\n    }\n\n    const newSoundId = utility.id(),\n      playSound = () => {\n        const soundArgs = {\n          id: newSoundId,\n          buffer: this._buffer,\n          volume: this._volume,\n          rate: this._rate,\n          muted: this._muted,\n          loop: this._loop,\n          playEndCallback: sound => this._fire(BuzzEvents.PlayEnd, sound.id()),\n          destroyCallback: sound => {\n            this._fire(BuzzEvents.Destroy, sound.id());\n            emitter.clear(sound.id());\n          },\n          fadeEndCallback: sound => this._fire(BuzzEvents.FadeEnd, sound.id())\n        };\n\n        if (typeof soundOrId === 'string' && this._sprite && this._sprite.hasOwnProperty(soundOrId)) {\n          const positions = this._sprite[soundOrId];\n          soundArgs.startPos = positions[0];\n          soundArgs.endPos = positions[1];\n        }\n\n        const newSound = this._engine.sound(this._compatibleSrc, this._id, soundArgs);\n        this._play(newSound);\n      };\n\n    // If the sound is not yet loaded push an action to the queue to play the sound once it's loaded.\n    if (!this.isLoaded()) {\n      this._queue.add('after-load', `play-${newSoundId}`, () => playSound());\n      this.load();\n    } else {\n      playSound();\n    }\n\n    return newSoundId;\n  }\n\n  /**\n   * Pauses the sound belongs to the passed id or all the sounds belongs to this group.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  pause(id) {\n    this._removePlayActions(id);\n    typeof id !== 'number' && this.fadeStop();\n    this._sounds(id).forEach(sound => sound.pause());\n    this._fire(BuzzEvents.Pause, id);\n\n    return this;\n  }\n\n  /**\n   * Stops the sound belongs to the passed id or all the sounds belongs to this group.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  stop(id) {\n    this._removePlayActions(id);\n    typeof id !== 'number' && this.fadeStop();\n    this._sounds(id).forEach(sound => sound.stop());\n    this._fire(BuzzEvents.Stop, id);\n\n    return this;\n  }\n\n  /**\n   * Mutes the sound belongs to the passed id or all the sounds belongs to this group.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  mute(id) {\n    const isGroup = typeof id !== 'number';\n    isGroup && this.fadeStop();\n    this._sounds(id).forEach(sound => sound.mute());\n    isGroup && (this._muted = true);\n\n    this._fire(BuzzEvents.Mute, id, this._muted);\n\n    return this;\n  }\n\n  /**\n   * Un-mutes the sound belongs to the passed id or all the sounds belongs to this group.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  unmute(id) {\n    const isGroup = typeof id !== 'number';\n    isGroup && this.fadeStop();\n    this._sounds(id).forEach(sound => sound.unmute());\n    isGroup && (this._muted = false);\n\n    this._fire(BuzzEvents.Mute, id, this._muted);\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the volume of the passed sound or the group.\n   * @param {number} [volume] Should be from 0.0 to 1.0.\n   * @param {number} [id] The sound id.\n   * @return {Buzz|number}\n   */\n  volume(volume, id) {\n    const isGroup = typeof id !== 'number';\n\n    if (typeof volume === 'number' && volume >= 0 && volume <= 1.0) {\n      isGroup && this.fadeStop();\n      this._sounds(id).forEach(sound => sound.volume(volume));\n      typeof id !== 'number' && (this._volume = volume);\n      this._fire(BuzzEvents.Volume, id, this._volume);\n      return this;\n    }\n\n    if (!isGroup) {\n      const sound = this._engine.sound(id);\n      return sound ? sound.volume() : null;\n    }\n\n    return this._volume;\n  }\n\n  /**\n   * Fades the group's or passed sound's volume to the passed value in the passed duration.\n   * @param {number} to The destination volume.\n   * @param {number} duration The period of fade in seconds.\n   * @param {string} [type = linear] The fade type (linear or exponential).\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  fade(to, duration, type = 'linear', id) {\n    const isGroup = typeof id !== 'number';\n\n    if (isGroup && this._fading) {\n      return this;\n    }\n\n    this._fire(BuzzEvents.FadeStart, id);\n\n    this._sounds(id).forEach(sound => sound.fade(to, duration, type));\n\n    if (isGroup) {\n      this._fading = true;\n\n      this._fadeTimer = setTimeout(() => {\n        this.volume(to);\n\n        clearTimeout(this._fadeTimer);\n\n        this._fadeTimer = null;\n        this._fading = false;\n        this._fire(BuzzEvents.FadeEnd);\n      }, duration * 1000);\n    }\n\n    return this;\n  }\n\n  /**\n   * Stops the group's or passed sound's current running fade.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  fadeStop(id) {\n    const isGroup = typeof id !== 'number';\n\n    if (isGroup && !this._fading) {\n      return this;\n    }\n\n    this._sounds(id).forEach(sound => sound.fadeStop());\n\n    if (isGroup) {\n      if (this._fadeTimer) {\n        clearTimeout(this._fadeTimer);\n        this._fadeTimer = null;\n      }\n\n      this._fading = false;\n    }\n\n    this._fire(BuzzEvents.FadeStop, id);\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the rate of the passed sound or the group.\n   * @param {number} [rate] Should be from 0.5 to 5.0.\n   * @param {number} [id] The sound id.\n   * @return {Buzz|number}\n   */\n  rate(rate, id) {\n    if (typeof rate === 'number' && rate >= 0.5 && rate <= 5) {\n      this._sounds(id).forEach(sound => sound.rate(rate));\n      typeof id !== 'number' && (this._rate = rate);\n      this._fire(BuzzEvents.Rate, id, this._rate);\n      return this;\n    }\n\n    if (typeof id === 'number') {\n      const sound = this._engine.sound(id);\n      return sound ? sound.rate() : null;\n    }\n\n    return this._rate;\n  }\n\n  /**\n   * Gets/sets the current playback position of the sound.\n   * @param {number} id The sound id\n   * @param {number} [seek] The seek position.\n   * @return {Buzz|number}\n   */\n  seek(id, seek) {\n    const sound = this._engine.sound(id);\n\n    if (!sound) {\n      return this;\n    }\n\n    if (typeof seek === 'number') {\n      // If the audio source is not yet loaded push an item to the queue to seek after the sound is loaded\n      // and load the sound.\n      if (!this.isLoaded()) {\n        this._queue.add('after-load', `seek-${id}`, () => this.seek(id, seek));\n        this.load();\n        return this;\n      }\n\n      sound.seek(seek);\n      this._fire(BuzzEvents.Seek, id, seek);\n      return this;\n    }\n\n    return sound.seek();\n  }\n\n  /**\n   * Gets/sets the looping behavior of a sound or the group.\n   * @param {boolean} [loop] True to loop the sound.\n   * @param {number} [id] The sound id.\n   * @return {Buzz|boolean}\n   */\n  loop(loop, id) {\n    if (typeof loop === 'boolean') {\n      this._sounds(id).forEach(sound => sound.loop(loop));\n      typeof id !== 'number' && (this._loop = loop);\n      return this;\n    }\n\n    if (typeof id === 'number') {\n      const sound = this._engine.sound(id);\n      return sound ? sound.loop() : null;\n    }\n\n    return this._loop;\n  }\n\n  /**\n   * Returns true if the passed sound is playing.\n   * @param {number} id The sound id.\n   * @return {boolean}\n   */\n  playing(id) {\n    const sound = this._engine.sound(id);\n    return sound ? sound.isPlaying() : null;\n  }\n\n  /**\n   * Returns true if the passed sound is muted or the group is muted.\n   * @param {number} [id] The sound id.\n   * @return {boolean}\n   */\n  muted(id) {\n    if (typeof id === 'number') {\n      const sound = this._engine.sound(id);\n      return sound ? sound.muted() : null;\n    }\n\n    return this._muted;\n  }\n\n  /**\n   * Returns the state of the passed sound or the group.\n   * @return {BuzzState|SoundState}\n   */\n  state(id) {\n    if (typeof id === 'number') {\n      const sound = this._engine.sound(id);\n      return sound ? sound.state() : null;\n    }\n\n    return this._state;\n  }\n\n  /**\n   * Returns the duration of the passed sound or the total duration of the sound.\n   * @param {number} [id] The sound id.\n   * @return {number}\n   */\n  duration(id) {\n    if (typeof id === 'number') {\n      const sound = this._engine.sound(id);\n      return sound ? sound.duration() : null;\n    }\n\n    return this._duration;\n  }\n\n  /**\n   * Unloads the loaded audio buffer.\n   * @return {Buzz}\n   */\n  unload() {\n    this._queue.remove('after-load');\n    this._engine.unload(this._compatibleSrc);\n    this._buffer = null;\n    this._duration = 0;\n    this._loadState = LoadState.NotLoaded;\n    return this;\n  }\n\n  /**\n   * Stops and destroys all the sounds belong to this group and release other dependencies.\n   */\n  destroy() {\n    if (this._state === BuzzState.Destroyed) {\n      return;\n    }\n\n    this.stop();\n    this._queue.clear();\n    this._engine.off(EngineEvents.Resume, this._onEngineResume);\n    this._engine.free(false, this._id);\n\n    this._buffer = null;\n    this._queue = null;\n    this._engine = null;\n    this._state = BuzzState.Destroyed;\n\n    this._fire(BuzzEvents.Destroy);\n\n    emitter.clear(this._id);\n  }\n\n  /**\n   * Subscribes to an event for the sound or the group.\n   * @param {string} eventName The event name.\n   * @param {function} handler The event handler.\n   * @param {boolean} [once = false] True for one-time event handling.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  on(eventName, handler, once = false, id) {\n    emitter.on(id || this._id, eventName, handler, once);\n    return this;\n  }\n\n  /**\n   * Un-subscribes from an event for the sound or the group.\n   * @param {string} eventName The event name.\n   * @param {function} handler The event handler.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  off(eventName, handler, id) {\n    emitter.off(id || this._id, eventName, handler);\n    return this;\n  }\n\n  /**\n   * Returns the unique id of the sound.\n   * @return {number}\n   */\n  id() {\n    return this._id;\n  }\n\n  /**\n   * Returns the audio resource loading status.\n   * @return {LoadState}\n   */\n  loadState() {\n    return this._loadState;\n  }\n\n  /**\n   * Returns true if the audio source is loaded.\n   * @return {boolean}\n   */\n  isLoaded() {\n    return this._loadState === LoadState.Loaded;\n  }\n\n  /**\n   * Returns the sound for the passed id.\n   * @param {number} id The sound id.\n   * @return {Sound}\n   */\n  sound(id) {\n    return this._engine.sound(id);\n  }\n\n  /**\n   * Returns true if the passed sound exists.\n   * @param {number} id The sound id.\n   * @return {boolean}\n   */\n  alive(id) {\n    return Boolean(this.sound(id));\n  }\n\n  /**\n   * Whenever the engine resume run the actions queued for it.\n   * @private\n   */\n  _onEngineResume() {\n    this._queue.run('after-engine-resume');\n  }\n\n  /**\n   * Checks the engine state and plays the passed sound.\n   * @param {Sound} sound The sound.\n   * @private\n   */\n  _play(sound) {\n    if (this._engine.state() === EngineState.Destroying || this._engine.state() === EngineState.Done) {\n      this._fire(BuzzEvents.Error, null, { type: ErrorType.PlayError, error: 'The engine is stopping/stopped' });\n      return;\n    }\n\n    if (this._engine.state() === EngineState.NoAudio) {\n      this._fire(BuzzEvents.Error, null, { type: ErrorType.NoAudio, error: 'Web Audio is un-available' });\n      return;\n    }\n\n    const playAndFire = () => {\n      sound.play();\n      this._fire(BuzzEvents.PlayStart, sound.id());\n    };\n\n    if ([EngineState.Suspending, EngineState.Suspended, EngineState.Resuming].indexOf(this._engine.state()) > -1) {\n      this._queue.add('after-engine-resume', `sound-${sound.id()}`, () => playAndFire());\n      this._engine.state() !== EngineState.Resuming && this._engine.resume();\n      return;\n    }\n\n    playAndFire();\n  }\n\n  /**\n   * Remove the play actions queued from the queue.\n   * @param {number} [id] The sound id.\n   * @private\n   */\n  _removePlayActions(id) {\n    this._queue.remove('after-load', id ? `play-${id}` : null);\n    this._queue.remove('after-engine-resume', id ? `sound-${id}` : null);\n  }\n\n  /**\n   * Returns the sound for the passed id or all the sounds belong to this group.\n   * @param {number} [id] The sound id.\n   * @return {Array<Sound>}\n   * @private\n   */\n  _sounds(id) {\n    if (typeof id === 'number') {\n      const sound = this._engine.sound(id);\n      return sound ? [sound] : [];\n    }\n\n    return this._engine.sounds(this._id);\n  }\n\n  /**\n   * Fires an event of group or sound.\n   * @param {string} eventName The event name.\n   * @param {number} [id] The sound id.\n   * @param {...*} args The arguments that to be passed to handler.\n   * @return {Buzz}\n   * @private\n   */\n  _fire(eventName, id, ...args) {\n    if (id) {\n      emitter.fire(id, eventName, ...args, this.sound(id), this);\n      emitter.fire(this._id, eventName, ...args, this.sound(id), this);\n    } else {\n      emitter.fire(this._id, eventName, ...args, this);\n    }\n\n    return this;\n  }\n}\n\nconst $buzz = args => new Buzz(args);\n[\n  'setup',\n  'load',\n  'unload',\n  'mute',\n  'unmute',\n  'volume',\n  'stop',\n  'suspend',\n  'resume',\n  'terminate',\n  'muted',\n  'state',\n  'context',\n  'isAudioAvailable',\n  'on',\n  'off'\n].forEach(method => {\n  $buzz[method] = function () {\n    const result = engine[method](...arguments);\n    return result === engine ? $buzz : result;\n  };\n});\n\nmodule.exports = $buzz;\n","/**\n * Represents a heap item.\n */\nclass HeapItem {\n\n  /**\n   * The sound object.\n   * @type {Sound}\n   */\n  sound = null;\n\n  /**\n   * The group id.\n   * @type {number|null}\n   */\n  groupId = null;\n\n  /**\n   * Set the group id and sound.\n   * @param {number} groupId The group id.\n   * @param {Sound} sound The sound instance.\n   */\n  constructor(groupId, sound) {\n    this.groupId = groupId;\n    this.sound = sound;\n  }\n}\n\n/**\n * Represents a collection of sounds belong to an audio resource.\n */\nclass HeapItemCollection {\n\n  /**\n   * The audio source url.\n   * @type {string|null}\n   */\n  url = null;\n\n  /**\n   * The collection of sound objects.\n   * @type {object}\n   */\n  items = {};\n\n  /**\n   * Adds a new sound item to the collection.\n   * @param {number} groupId The group id.\n   * @param {Sound} sound The sound instance.\n   */\n  add(groupId, sound) {\n    const soundId = sound.id().toString();\n\n    if (this.items.hasOwnProperty(soundId)) {\n      return;\n    }\n\n    this.items[soundId] = new HeapItem(groupId, sound);\n  }\n\n  /**\n   * Removes the sounds.\n   * @param {boolean} [idle = true] True to destroy only the idle sounds.\n   * @param {number} [groupId] The group id.\n   */\n  free(idle = true, groupId) {\n    Object.values(this.items).forEach(item => {\n      const { sound, soundGroupId } = item;\n\n      if(idle && (sound.isPlaying() || sound.isPaused())) {\n        return;\n      }\n\n      if (!Boolean(groupId) || soundGroupId === groupId) {\n        sound.destroy();\n        delete this.items[sound.id()];\n      }\n    });\n  }\n\n  /**\n   * Returns the sounds belong to the group or all the sounds in the collection.\n   * @param {number} [groupId] The group id.\n   * @return {Array<HeapItem>}\n   */\n  sounds(groupId) {\n    const itemsArray = Object.values(this.items);\n    const items = groupId ? itemsArray.filter(item => item.groupId === groupId) : itemsArray;\n    return items.map(item => item.sound);\n  }\n\n  /**\n   * Destroys all the sounds.\n   */\n  destroy() {\n    Object.values(this.items).forEach(item => item.sound.destroy());\n    this.items = {};\n  }\n}\n\n/**\n * Stores all the created sounds.\n */\nclass Heap {\n\n  /**\n   * The sound collections.\n   * @type {object}\n   * @private\n   */\n  _collections = {};\n\n  /**\n   * Initialize stuff.\n   */\n  constructor() {\n    this.free = this.free.bind(this);\n  }\n\n  /**\n   * Adds a new sound to the respective collection.\n   * @param {string} url The audio source url or base64 string.\n   * @param {number} groupId The group id.\n   * @param {Sound} sound The sound instance.\n   */\n  add(url, groupId, sound) {\n    if (!this._collections.hasOwnProperty(url)) {\n      this._collections[url] = new HeapItemCollection();\n    }\n\n    this._collections[url].add(groupId, sound);\n  }\n\n  /**\n   * Returns the sound based on the id.\n   * @param {number} id The sound id.\n   */\n  sound(id) {\n    return this.sounds().find(sound => sound.id() === id);\n  }\n\n  /**\n   * Returns the sounds belongs to a particular group or all of them.\n   * @param {number} [groupId] The group id.\n   * @return {Array}\n   */\n  sounds(groupId) {\n    const sounds = [];\n    Object.values(this._collections).forEach(col => sounds.push(...col.sounds(groupId)));\n    return sounds;\n  }\n\n  /**\n   * Removes sounds from the collections.\n   * @param {boolean} [idle = true] True to destroy only the idle sounds.\n   * @param {number} [groupId] The group id.\n   */\n  free(idle = true, groupId) {\n    Object.values(this._collections).forEach(col => col.free(idle, groupId));\n  }\n\n  /**\n   * Destroys all the sounds.\n   */\n  destroy() {\n    Object.values(this._collections).forEach(col => col.destroy());\n    this._collections = {};\n  }\n}\n\nexport default Heap;\n","import engine from './Engine';\nimport utility from './Utility';\n\n/**\n * Enum that represents the different states of a sound.\n * @enum {string}\n */\nconst SoundState = {\n  Ready: 'ready',\n  Playing: 'playing',\n  Paused: 'paused',\n  Destroyed: 'destroyed'\n};\n\n/**\n * Represents a sound created using Web Audio API.\n * @class\n */\nclass Sound {\n\n  /**\n   * Unique id.\n   * @type {number}\n   * @private\n   */\n  _id = -1;\n\n  /**\n   * The current volume of the sound. Should be from 0.0 to 1.0.\n   * @type {number}\n   * @private\n   */\n  _volume = 1.0;\n\n  /**\n   * The current playback speed. Should be from 0.5 to 5.\n   * @type {number}\n   * @private\n   */\n  _rate = 1;\n\n  /**\n   * True if the sound is currently muted.\n   * @type {boolean}\n   * @private\n   */\n  _muted = false;\n\n  /**\n   * True if the sound should play repeatedly.\n   * @type {boolean}\n   * @private\n   */\n  _loop = false;\n\n  /**\n   * The current state (playing, paused etc.) of the sound.\n   * @type {SoundState}\n   * @private\n   */\n  _state = SoundState.Ready;\n\n  /**\n   * Web API's audio context.\n   * @type {AudioContext}\n   * @private\n   */\n  _context = null;\n\n  /**\n   * The gain node to control the volume of the sound.\n   * @type {GainNode}\n   * @private\n   */\n  _gainNode = null;\n\n  /**\n   * The audio buffer.\n   * @type {AudioBuffer}\n   * @private\n   */\n  _buffer = null;\n\n  /**\n   * The AudioBufferSourceNode that plays the audio buffer assigned to it.\n   * @type {AudioBufferSourceNode}\n   * @private\n   */\n  _bufferSourceNode = null;\n\n  /**\n   * Duration of the playback in seconds.\n   * @type {number}\n   * @private\n   */\n  _duration = 0;\n\n  /**\n   * The playback start position.\n   * @type {number}\n   * @private\n   */\n  _startPos = 0;\n\n  /**\n   * The playback end position.\n   * @type {number}\n   * @private\n   */\n  _endPos = 0;\n\n  /**\n   * The current position of the playback.\n   * @type {number}\n   * @private\n   */\n  _currentPos = 0;\n\n  /**\n   * The position of the playback during rate change.\n   * @type {number}\n   * @private\n   */\n  _rateSeek = 0;\n\n  /**\n   * The time at which the playback started.\n   * This property is required for getting the seek position of the playback.\n   * @type {number}\n   * @private\n   */\n  _startTime = 0;\n\n  /**\n   * The callback that will be invoked after the play ends.\n   * @type {function}\n   * @private\n   */\n  _playEndCallback = null;\n\n  /**\n   * The callback that will be invoked after the sound destroyed.\n   * @type {function}\n   * @private\n   */\n  _destroyCallback = null;\n\n  /**\n   * True if the sound is currently fading.\n   * @type {boolean}\n   * @private\n   */\n  _fading = false;\n\n  /**\n   * The timer that runs function after the fading is complete.\n   * @type {number|null}\n   * @private\n   */\n  _fadeTimer = null;\n\n  /**\n   * The callback that will be invoked after the fade is completed.\n   * @type {function}\n   * @private\n   */\n  _fadeEndCallback = null;\n\n  /**\n   * Initializes the internal properties of the sound.\n   * @param {object} args The input parameters of the sound.\n   * @param {string} [args.id] The unique id of the sound.\n   * @param {AudioBuffer} [args.buffer] Audio source buffer.\n   * @param {number} [args.volume = 1.0] The initial volume of the sound. Should be from 0.0 to 1.0.\n   * @param {number} [args.rate = 1] The initial playback rate of the sound. Should be from 0.5 to 5.0.\n   * @param {boolean} [args.loop = false] True to play the sound repeatedly.\n   * @param {boolean} [args.muted = false] True to be muted initially.\n   * @param {number} [args.startPos] The playback start position.\n   * @param {number} [args.endPos] The playback end position.\n   * @param {function} [args.playEndCallback] The callback that will be invoked after the play ends.\n   * @param {function} [args.destroyCallback] The callback that will be invoked after destroyed.\n   * @param {function} [args.fadeEndCallback] The callback that will be invoked the fade is completed.\n   * @constructor\n   */\n  constructor(args) {\n    const {\n      id,\n      buffer,\n      volume,\n      rate,\n      loop,\n      muted,\n      startPos,\n      endPos,\n      playEndCallback,\n      destroyCallback,\n      fadeEndCallback\n    } = args;\n\n    // Set the passed id or the random one.\n    this._id = typeof id === 'number' ? id : utility.id();\n\n    // Set the passed audio buffer and duration.\n    this._buffer = buffer;\n    this._endPos = this._buffer.duration;\n\n    // Set other properties.\n    volume && (this._volume = volume);\n    rate && (this._rate = rate);\n    muted && (this._muted = muted);\n    loop && (this._loop = loop);\n    startPos && (this._startPos = startPos);\n    endPos && (this._endPos = endPos);\n    this._playEndCallback = playEndCallback;\n    this._destroyCallback = destroyCallback;\n    this._fadeEndCallback = fadeEndCallback;\n\n    // Calculate the duration.\n    this._duration = this._endPos - this._startPos;\n\n    // Create gain node and set the volume.\n    this._context = engine.context();\n    this._gainNode = this._context.createGain();\n    this._gainNode.gain.setValueAtTime(this._muted ? 0 : this._volume, this._context.currentTime);\n  }\n\n  /**\n   * Plays the sound or the sound defined in the sprite.\n   * @return {Sound}\n   */\n  play() {\n    // If the sound is already playing then return.\n    if (this.isPlaying()) {\n      return this;\n    }\n\n    // Get the playback starting position.\n    let seek = Math.max(0, this._currentPos > 0 ? this._currentPos : this._startPos);\n\n    // Create a new buffersourcenode to play the sound.\n    this._bufferSourceNode = this._context.createBufferSource();\n\n    // Set the buffer, playback rate and loop parameters\n    this._bufferSourceNode.buffer = this._buffer;\n    this._bufferSourceNode.playbackRate.setValueAtTime(this._rate, this._context.currentTime);\n    this._setLoop(this._loop);\n\n    // Connect the node to the audio graph.\n    this._bufferSourceNode.connect(this._gainNode);\n\n    // Listen to the \"ended\" event to reset/clean things.\n    this._bufferSourceNode.addEventListener('ended', () => {\n      // Reset the seek positions\n      this._currentPos = 0;\n      this._rateSeek = 0;\n\n      // Destroy the node (AudioBufferSourceNodes are one-time use and throw objects).\n      this._destroyBufferNode();\n\n      // Reset the state to allow future actions.\n      this._state = SoundState.Ready;\n\n      // Invoke the callback if there is one.\n      this._playEndCallback && this._playEndCallback(this);\n    });\n\n    const startTime = this._context.currentTime;\n\n    // Call the supported method to play the sound.\n    if (typeof this._bufferSourceNode.start !== 'undefined') {\n      this._bufferSourceNode.start(startTime, seek, this._loop ? undefined : this._duration);\n    } else {\n      this._bufferSourceNode.noteGrainOn(startTime, seek, this._loop ? undefined : this._duration);\n    }\n\n    // Record the starting time and set the state.\n    this._startTime = startTime;\n    this._state = SoundState.Playing;\n\n    return this;\n  }\n\n  /**\n   * Pauses the playing sound.\n   * @return {Sound}\n   */\n  pause() {\n    // If the sound is already playing return.\n    if (!this.isPlaying()) {\n      return this;\n    }\n\n    // Stop the current running fade.\n    this.fadeStop();\n\n    // Save the current position and reset rateSeek.\n    this._currentPos = this.seek();\n    this._rateSeek = 0;\n\n    this._destroyBufferNode();\n\n    this._state = SoundState.Paused;\n\n    return this;\n  }\n\n  /**\n   * Stops the sound that is playing or in paused state.\n   * @return {Sound}\n   */\n  stop() {\n    // If the sound is not playing or paused return.\n    if (!this.isPlaying() && !this.isPaused()) {\n      return this;\n    }\n\n    // Stop the current running fade.\n    this.fadeStop();\n\n    // Reset the variables\n    this._currentPos = 0;\n    this._rateSeek = 0;\n\n    this._destroyBufferNode();\n\n    this._state = SoundState.Ready;\n\n    return this;\n  }\n\n  /**\n   * Mutes the sound.\n   * @return {Sound}\n   */\n  mute() {\n    // Stop the current running fade.\n    this.fadeStop();\n\n    // Set the value of gain node to 0.\n    this._gainNode.gain.setValueAtTime(0, this._context.currentTime);\n\n    // Set the muted property true.\n    this._muted = true;\n\n    return this;\n  }\n\n  /**\n   * Un-mutes the sound.\n   * @return {Sound}\n   */\n  unmute() {\n    // Stop the current running fade.\n    this.fadeStop();\n\n    // Reset the gain node's value back to volume.\n    this._gainNode.gain.setValueAtTime(this._volume, this._context.currentTime);\n\n    // Set the muted property to false.\n    this._muted = false;\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the volume.\n   * @param {number} [vol] Should be from 0.0 to 1.0.\n   * @return {Sound|number}\n   */\n  volume(vol) {\n    // If no input parameter is passed then return the volume.\n    if (typeof vol === 'undefined') {\n      return this._volume;\n    }\n\n    // Stop the current running fade.\n    this.fadeStop();\n\n    // Set the gain's value to the passed volume.\n    this._gainNode.gain.setValueAtTime(this._muted ? 0 : vol, this._context.currentTime);\n\n    // Set the volume to the property.\n    this._volume = vol;\n\n    return this;\n  }\n\n  /**\n   * Fades the sound volume to the passed value in the passed duration.\n   * @param {number} to The destination volume.\n   * @param {number} duration The period of fade.\n   * @param {string} [type = linear] The fade type (linear or exponential).\n   * @return {Sound}\n   */\n  fade(to, duration, type = 'linear') {\n    // If a fade is already running stop it.\n    if (this._fading) {\n      this.fadeStop();\n    }\n\n    this._fading = true;\n\n    if (type === 'linear') {\n      this._gainNode.gain.linearRampToValueAtTime(to, this._context.currentTime + duration);\n    } else {\n      this._gainNode.gain.exponentialRampToValueAtTime(to, this._context.currentTime + duration);\n    }\n\n    this._fadeTimer = setTimeout(() => {\n      this.volume(to);\n\n      clearTimeout(this._fadeTimer);\n\n      this._fadeTimer = null;\n      this._fading = false;\n\n      this._fadeEndCallback && this._fadeEndCallback(this);\n    }, duration * 1000);\n\n    return this;\n  }\n\n  /**\n   * Stops the current running fade.\n   * @return {Sound}\n   */\n  fadeStop() {\n    if (!this._fading) {\n      return this;\n    }\n\n    this._gainNode.gain.cancelScheduledValues(this._context.currentTime);\n\n    if (this._fadeTimer) {\n      clearTimeout(this._fadeTimer);\n      this._fadeTimer = null;\n    }\n\n    this._fading = false;\n    this.volume(this._gainNode.gain.value);\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the playback rate.\n   * @param {number} [rate] The playback rate. Should be from 0.5 to 5.\n   * @return {Sound|number}\n   */\n  rate(rate) {\n    // If no input parameter is passed return the current rate.\n    if (typeof rate === 'undefined') {\n      return this._rate;\n    }\n\n    this._rate = rate;\n    this._rateSeek = this.seek();\n\n    if (this.isPlaying()) {\n      this._startTime = this._context.currentTime;\n      this._bufferSourceNode && (this._bufferSourceNode.playbackRate.setValueAtTime(rate, this._context.currentTime));\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the seek position.\n   * @param {number} [seek] The seek position.\n   * @return {Sound|number}\n   */\n  seek(seek) {\n    // If no parameter is passed return the current position.\n    if (typeof seek === 'undefined') {\n      const realTime = this.isPlaying() ? this._context.currentTime - this._startTime : 0;\n      const rateElapsed = this._rateSeek ? this._rateSeek - this._currentPos : 0;\n\n      return this._currentPos + (rateElapsed + realTime * this._rate);\n    }\n\n    // If seeking outside the borders then return.\n    if (seek < this._startPos || seek > this._endPos) {\n      return this;\n    }\n\n    // If the sound is currently playing... pause it, set the seek position and then continue playing.\n    const isPlaying = this.isPlaying();\n\n    if (isPlaying) {\n      this.pause();\n    }\n\n    this._currentPos = seek;\n\n    if (isPlaying) {\n      this.play();\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the loop parameter of the sound.\n   * @param {boolean} [loop] True to loop the sound.\n   * @return {Sound/boolean}\n   */\n  loop(loop) {\n    if (typeof loop !== 'boolean') {\n      return this._loop;\n    }\n\n    this._loop = loop;\n    this._setLoop(loop);\n\n    return this;\n  }\n\n  /**\n   * Destroys the dependencies and release the memory.\n   * @return {Sound}\n   */\n  destroy() {\n    // If the sound is already destroyed return.\n    if (this._state === SoundState.Destroyed) {\n      return this;\n    }\n\n    // Stop the sound.\n    this.stop();\n\n    this._gainNode.disconnect();\n\n    this._buffer = null;\n    this._context = null;\n    this._gainNode = null;\n\n    // Set the state to \"destroyed\".\n    this._state = SoundState.Destroyed;\n\n    this._destroyCallback && this._destroyCallback(this);\n\n    return this;\n  }\n\n  /**\n   * Returns the unique id of the sound.\n   * @return {number}\n   */\n  id() {\n    return this._id;\n  }\n\n  /**\n   * Returns whether the sound is muted or not.\n   * @return {boolean}\n   */\n  muted() {\n    return this._muted;\n  }\n\n  /**\n   * Returns the state of the sound.\n   * @return {SoundState}\n   */\n  state() {\n    return this._state;\n  }\n\n  /**\n   * Returns the total duration of the playback.\n   * @return {number}\n   */\n  duration() {\n    return this._duration;\n  }\n\n  /**\n   * Returns true if the buzz is playing.\n   * @return {boolean}\n   */\n  isPlaying() {\n    return this._state === SoundState.Playing;\n  }\n\n  /**\n   * Returns true if buzz is paused.\n   * @return {boolean}\n   */\n  isPaused() {\n    return this._state === SoundState.Paused;\n  }\n\n  /**\n   * Returns the gain node.\n   * @return {GainNode}\n   */\n  _gain() {\n    return this._gainNode;\n  }\n\n  /**\n   * Stops the playing buffer source node and destroys it.\n   * @private\n   */\n  _destroyBufferNode() {\n    if (!this._bufferSourceNode) {\n      return;\n    }\n\n    if (typeof this._bufferSourceNode.stop !== 'undefined') {\n      this._bufferSourceNode.stop();\n    }\n    else {\n      this._bufferSourceNode.noteGrainOff();\n    }\n\n    this._bufferSourceNode.disconnect();\n    this._bufferSourceNode.removeEventListener('ended', this._onEnded);\n    this._bufferSourceNode = null;\n  }\n\n  /**\n   * Sets the sound to play repeatedly or not.\n   * @param {boolean} loop True to play the sound repeatedly.\n   * @private\n   */\n  _setLoop(loop) {\n    if (!this._bufferSourceNode) {\n      return;\n    }\n\n    this._bufferSourceNode.loop = loop;\n\n    if (loop) {\n      this._bufferSourceNode.loopStart = this._startPos;\n      this._bufferSourceNode.loopEnd = this._endPos;\n    }\n  }\n}\n\nexport {Sound as default, SoundState};\n"],"sourceRoot":""}